services:
  # База данных PostgreSQL
  postgres:
    image: postgres:14-alpine
    container_name: vpn-bot-postgres
    restart: always
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgrespassword}
      POSTGRES_DB: ${POSTGRES_DB:-vpn_bot}
    volumes:
      - postgres-data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - vpn-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Основное приложение
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: vpn-bot-app
    restart: always
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      - DATABASE_URL=postgresql://postgres:postgrespassword@postgres:5432/vpn_bot?schema=public
      - NODE_ENV=production
      - PORT=3000
      - HOST=0.0.0.0
      - ENABLE_TELEGRAM_PAYMENTS=true
      - TELEGRAM_PAYMENT_TOKEN=381764678:TEST:1175912025-03-2610:29
    env_file:
      - .env
    ports:
      - "3000:3000"
    volumes:
      - ./logs:/app/logs
    networks:
      - vpn-network

  # Админ-панель
  admin:
    build:
      context: .
      dockerfile: Dockerfile.admin
    container_name: vpn-bot-admin
    restart: always
    environment:
      - REACT_APP_API_URL=http://localhost:3000/api
    ports:
      - "3001:80"
    networks:
      - vpn-network
    depends_on:
      - app

networks:
  vpn-network:
    driver: bridge

volumes:
  postgres-data: 