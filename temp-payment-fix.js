// Temporary fix file
const TelegramBot = require("node-telegram-bot-api");
const { PrismaClient } = require("@prisma/client");
const config = require("../../config").default;
const logger = require("../../utils/logger").default;
const { SubscriptionPeriod, getPaymentAmount } = require("../../services/payment");

/**
 * Fixed handler for payment method selection to avoid Telegram Payment errors
 */
async function handleSelectPaymentMethod(bot, chatId, messageId, period) {
  try {
    const prisma = new PrismaClient();
    
    // Find user
    const user = await prisma.user.findUnique({
      where: { telegramId: BigInt(chatId) }
    });
    
    if (!user) {
      await bot.sendMessage(chatId, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º.");
      return;
    }
    
    // Create message with payment method selection
    const amount = getPaymentAmount(period);
    const periodName = period === SubscriptionPeriod.MONTHLY 
      ? "–ú–µ—Å—è—á–Ω—ã–π" 
      : period === SubscriptionPeriod.QUARTERLY 
        ? "–ö–≤–∞—Ä—Ç–∞–ª—å–Ω—ã–π" 
        : "–ì–æ–¥–æ–≤–æ–π";
    
    const message = `
üí≥ *–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã*

–¢–∞—Ä–∏—Ñ: ${periodName}
–°—É–º–º–∞: ${amount} ‚ÇΩ

–í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω—ã–π —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:
    `;
    
    // Prepare keyboard with bank card only, disable Telegram Payments
    const keyboard = {
      inline_keyboard: [
        [{ text: "üí≥ –ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–∞", callback_data: `pay_card_${period}` }],
        [{ text: "‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data: "buy" }]
      ]
    };
    
    // Send message with payment method selection
    await bot.editMessageText(message, {
      chat_id: chatId,
      message_id: messageId,
      parse_mode: "Markdown",
      reply_markup: keyboard
    });
    
    await prisma.$disconnect();
  } catch (error) {
    console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –º–µ—Ç–æ–¥–∞ –æ–ø–ª–∞—Ç—ã: ${error.message}`);
    await bot.sendMessage(chatId, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
  }
}

module.exports = { handleSelectPaymentMethod };
