export const handleStart: CommandHandler = (bot: TelegramBot) => async (msg: TelegramBot.Message, match: RegExpExecArray | null): Promise<void> => {
  try {
    const chatId = msg.chat.id;
    const userId = msg.from?.id;

    if (!userId) {
      logger.error('–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start –±–µ–∑ ID –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è');
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç –∫–æ–º–∞–Ω–¥—ã start
    const startParam = match ? match[1] : '';
    logger.info(`–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º: ${startParam || '–±–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞'}`);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã
    if (startParam && startParam.startsWith('payment_return_')) {
      const paymentId = startParam.replace('payment_return_', '');
      logger.info(`–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã: ${paymentId}`);
      
      try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞
        const { checkPaymentStatus } = require('../../services/payment');
        const status = await checkPaymentStatus(paymentId);
        
        logger.info(`–ü—Ä–æ–≤–µ—Ä–µ–Ω —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞ ${paymentId} –ø–æ –≤–æ–∑–≤—Ä–∞—Ç—É: ${status}`);
        
        // –ù–∞—Ö–æ–¥–∏–º –ø–ª–∞—Ç–µ–∂ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        const payment = await prisma.payment.findUnique({
          where: { id: paymentId },
          include: { user: true }
        });
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞
        if (status === 'SUCCEEDED') {
          // –ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω—ã–π
          await bot.sendMessage(
            chatId,
            `‚úÖ *–û–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–∞!*\n\n–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ VPN –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞.\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /subscription –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π –∏ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.`,
            { 
              parse_mode: 'Markdown',
              reply_markup: {
                inline_keyboard: [
                  [{ text: 'üìã –ú–æ—è –ø–æ–¥–ø–∏—Å–∫–∞', callback_data: 'my_subscription' }]
                ]
              }
            }
          );
          
          // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–µ—Ä–Ω—É–ª—Å—è –≤ –±–æ—Ç, –æ—Ç–º–µ—á–∞–µ–º —ç—Ç–æ –≤ –ª–æ–≥–∞—Ö
          await prisma.paymentLog.create({
            data: {
              type: 'BOT_RETURN',
              paymentId: paymentId,
              data: JSON.stringify({
                telegramId: userId,
                timestamp: new Date().toISOString()
              })
            }
          }).catch(e => logger.warn(`–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞–ø–∏—Å—å –≤ –ª–æ–≥–∞—Ö: ${e}`));
          
          return;
        } else if (status === 'PENDING') {
          // –ü–ª–∞—Ç–µ–∂ –µ—â—ë –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è
          await bot.sendMessage(
            chatId,
            `‚è± *–ü–ª–∞—Ç–µ–∂ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ*\n\n–í–∞—à –ø–ª–∞—Ç–µ–∂ –µ—â—ë –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è. –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç. –ú—ã —É–≤–µ–¥–æ–º–∏–º –≤–∞—Å, –∫–æ–≥–¥–∞ –ø–ª–∞—Ç–µ–∂ –±—É–¥–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω.`,
            { 
              parse_mode: 'Markdown',
              reply_markup: {
                inline_keyboard: [
                  [{ text: 'üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞', callback_data: `check_payment_${paymentId}` }]
                ]
              }
            }
          );
          return;
        } else {
          // –ü–ª–∞—Ç–µ–∂ –Ω–µ —É–¥–∞–ª—Å—è –∏–ª–∏ –æ—Ç–º–µ–Ω–µ–Ω
          await bot.sendMessage(
            chatId,
            `‚ùå *–ü–ª–∞—Ç–µ–∂ –Ω–µ —É–¥–∞–ª—Å—è –∏–ª–∏ –±—ã–ª –æ—Ç–º–µ–Ω–µ–Ω*\n\n–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–∞—à –ø–ª–∞—Ç–µ–∂ –Ω–µ –±—ã–ª –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–ø–ª–∞—Ç–∏—Ç—å —Å–Ω–æ–≤–∞ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã.`,
            { 
              parse_mode: 'Markdown',
              reply_markup: {
                inline_keyboard: [
                  [{ text: 'üí≥ –í—ã–±—Ä–∞—Ç—å —Ç–∞—Ä–∏—Ñ', callback_data: 'buy' }],
                  [{ text: 'üÜò –ü–æ–º–æ—â—å', callback_data: 'help' }]
                ]
              }
            }
          );
          return;
        }
      } catch (paymentError) {
        logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞ ${paymentId}: ${paymentError}`);
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        await bot.sendMessage(
          chatId,
          `‚ö†Ô∏è *–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–ª–∞—Ç–µ–∂–∞*\n\n–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –≤–∞—à–µ–≥–æ –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /subscription –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –∏–ª–∏ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–º–æ—â–∏.`,
          { parse_mode: 'Markdown' }
        );
        return;
      }
    }

    // –î–∞–ª–µ–µ –æ–±—ã—á–Ω–∞—è –ª–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /start
    // ... existing code ...
  } catch (error) {
    logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã /start: ${error}`);
  }
}; 