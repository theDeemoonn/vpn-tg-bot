import TelegramBot, { Message } from 'node-telegram-bot-api';
import { getUserActiveSubscriptions } from '../../services/user';
import { prisma } from '../../services/database';
import logger from '../../utils/logger';
import { MessageHandler } from './types';

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /subscription
 * @param bot - —ç–∫–∑–µ–º–ø–ª—è—Ä Telegram –±–æ—Ç–∞
 */
export const handleSubscription: MessageHandler = (bot: TelegramBot) => async (message: Message): Promise<void> => {
  try {
    const chatId = message.chat.id;
    const telegramId = message.from?.id || 0;
    
    // –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const user = await prisma.user.findUnique({
      where: { telegramId: BigInt(telegramId) }
    });
    
    if (!user) {
      bot.sendMessage(chatId, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º.');
      return;
    }
    
    // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –¥–∞–Ω–Ω—ã–º–∏ —Å–µ—Ä–≤–µ—Ä–∞ VPN
    const subscriptions = await getUserActiveSubscriptions(user.id);
    
    if (subscriptions.length === 0) {
      const noSubMessage = `
üòï *–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫*

–ß—Ç–æ–±—ã –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –ø–æ–¥–ø–∏—Å–∫—É, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /buy –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.
      `;
      
      const keyboard = {
        reply_markup: {
          inline_keyboard: [
            [{ text: 'üí≥ –ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É', callback_data: 'buy' }],
            [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'main_menu' }]
          ]
        },
        parse_mode: 'Markdown' as TelegramBot.ParseMode
      };
      
      bot.sendMessage(chatId, noSubMessage, keyboard);
      return;
    }
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–¥–ø–∏—Å–∫–∞—Ö
    let subscriptionMessage = 'üîë *–í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏:*\n\n';
    
    for (const sub of subscriptions) {
      const endDate = new Date(sub.endDate);
      const formattedDate = `${endDate.getDate()}.${endDate.getMonth() + 1}.${endDate.getFullYear()}`;
      
      // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ VPN —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏
      let serverName = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
      let serverLocation = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
      
      // –í —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –∑–∞–ø—Ä–æ—Å–∞ —Å include: { vpnServer: true } –ø–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç —Å —Å–µ—Ä–≤–µ—Ä–æ–º
      const server = await prisma.vpnServer.findUnique({
        where: { id: sub.vpnServerId }
      });
      
      if (server) {
        serverName = server.name;
        serverLocation = server.location;
      }
      
      subscriptionMessage += `üåê *–ü–æ–¥–ø–∏—Å–∫–∞ #${sub.id}*\n`;
      subscriptionMessage += `üìç –°–µ—Ä–≤–µ—Ä: ${serverName} (${serverLocation})\n`;
      subscriptionMessage += `‚è± –î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: ${formattedDate}\n`;
      subscriptionMessage += `‚¨áÔ∏è –°–∫–æ—Ä–æ—Å—Ç—å —Å–∫–∞—á–∏–≤–∞–Ω–∏—è: ${sub.downloadSpeed} Mbps\n`;
      subscriptionMessage += `‚¨ÜÔ∏è –°–∫–æ—Ä–æ—Å—Ç—å –∑–∞–≥—Ä—É–∑–∫–∏: ${sub.uploadSpeed} Mbps\n`;
      subscriptionMessage += `üîÑ –ê–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ: ${sub.autoRenewal ? '–í–∫–ª—é—á–µ–Ω–æ' : '–û—Ç–∫–ª—é—á–µ–Ω–æ'}\n`;
      subscriptionMessage += `üìÇ –¢–æ—Ä—Ä–µ–Ω—Ç—ã: ${sub.torrentsAllowed ? '–†–∞–∑—Ä–µ—à–µ–Ω—ã' : '–ó–∞–ø—Ä–µ—â–µ–Ω—ã'}\n\n`;
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    const keyboard = {
      reply_markup: {
        inline_keyboard: [
          [
            { text: 'üì• –ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é', callback_data: `get_config_${subscriptions[0].id}` },
            { text: 'üîÑ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ', callback_data: `manage_sub_${subscriptions[0].id}` }
          ],
          [
            { text: 'üí≥ –ö—É–ø–∏—Ç—å –µ—â–µ', callback_data: 'buy' },
            { text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'main_menu' }
          ]
        ]
      },
      parse_mode: 'Markdown' as TelegramBot.ParseMode
    };
    
    // –ï—Å–ª–∏ –ø–æ–¥–ø–∏—Å–æ–∫ –±–æ–ª—å—à–µ –æ–¥–Ω–æ–π, –¥–æ–±–∞–≤–ª—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –º–µ–∂–¥—É –Ω–∏–º–∏
    if (subscriptions.length > 1) {
      const navigationButtons = subscriptions.map((sub, index) => ({
        text: `${index + 1}`,
        callback_data: `show_sub_${sub.id}`
      }));
      
      keyboard.reply_markup.inline_keyboard.splice(
        1, 0, navigationButtons
      );
    }
    
    await bot.sendMessage(chatId, subscriptionMessage, keyboard);
  } catch (error) {
    logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã /subscription: ${error}`);
    bot.sendMessage(message.chat.id, 'üòû –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
}; 