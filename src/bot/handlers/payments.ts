import TelegramBot from 'node-telegram-bot-api';
import { logger } from '../../utils/logger';
import { prisma } from '../../services/database';
import { handleSuccessfulYookassaTelegramPayment, answerPreCheckoutQuery } from '../../services/yookassaTelegramPayments';

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–µ-—á–µ–∫–∞—É—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç Telegram Payments API
 * –î–æ–ª–∂–µ–Ω –æ—Ç–≤–µ—Ç–∏—Ç—å –≤ —Ç–µ—á–µ–Ω–∏–µ 10 —Å–µ–∫—É–Ω–¥, –∏–Ω–∞—á–µ –ø–ª–∞—Ç–µ–∂ –±—É–¥–µ—Ç –æ—Ç–º–µ–Ω–µ–Ω
 */
export const handlePreCheckoutQuery = (bot: TelegramBot) => async (query: TelegramBot.PreCheckoutQuery): Promise<void> => {
  try {
    logger.info(`–ü–æ–ª—É—á–µ–Ω pre-checkout query –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${query.from.id}: ${query.id}`);
    logger.debug(`–î–∞–Ω–Ω—ã–µ pre-checkout query: ${JSON.stringify({
      id: query.id,
      from: query.from.id,
      currency: query.currency,
      total_amount: query.total_amount,
      invoice_payload: query.invoice_payload.substring(0, 50) + '...'
    })}`);
    
    // –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –∏–∑ payload
    try {
      const payloadData = JSON.parse(query.invoice_payload);
      logger.info(`–î–∞–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∞: userId=${payloadData.userId}, telegramId=${payloadData.telegramId}, –ø–µ—Ä–∏–æ–¥=${payloadData.subscriptionPeriod}`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const user = await prisma.user.findUnique({
        where: { id: parseInt(payloadData.userId, 10) }
      });
      
      if (!user) {
        logger.error(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: userId=${payloadData.userId}`);
        await answerPreCheckoutQuery(bot, query.id, false, '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ');
        return;
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É–º–º—É –ø–ª–∞—Ç–µ–∂–∞
      // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏, –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
      
      // –ï—Å–ª–∏ –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ, –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂
      logger.info(`–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º pre-checkout query ${query.id}`);
      await answerPreCheckoutQuery(bot, query.id, true);
      
      // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –ø—Ä–æ–≤–µ—Ä–∫–µ –≤ –ª–æ–≥–∞—Ö
      await prisma.paymentLog.create({
        data: {
          type: 'PRE_CHECKOUT',
          paymentId: `tg_${Date.now()}_${payloadData.userId}`, // –≤—Ä–µ–º–µ–Ω–Ω—ã–π ID, –±—É–¥–µ—Ç –∑–∞–º–µ–Ω–µ–Ω –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –ø–ª–∞—Ç–µ–∂–µ
          data: JSON.stringify({
            queryId: query.id,
            payload: payloadData,
            amount: query.total_amount / 100, // –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∏–∑ –∫–æ–ø–µ–µ–∫
            currency: query.currency,
            timestamp: new Date().toISOString()
          })
        }
      }).catch(e => logger.warn(`–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞–ø–∏—Å—å –≤ –ª–æ–≥–∞—Ö: ${e}`));
    } catch (error) {
      logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ payload: ${error}`);
      await answerPreCheckoutQuery(bot, query.id, false, '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–∞');
    }
  } catch (error) {
    logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ pre-checkout query: ${error}`);
    
    // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏, –ø—ã—Ç–∞–µ–º—Å—è –æ—Ç–∫–ª–æ–Ω–∏—Ç—å –ø–ª–∞—Ç–µ–∂
    try {
      await answerPreCheckoutQuery(bot, query.id, false, '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞');
    } catch (answerError) {
      logger.error(`–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ pre-checkout query: ${answerError}`);
    }
  }
};

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É—Å–ø–µ—à–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π –æ—Ç Telegram Payments API
 */
export const handleSuccessfulPayment = (bot: TelegramBot) => async (msg: TelegramBot.Message): Promise<void> => {
  try {
    if (!msg.successful_payment) {
      logger.warn('–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ –¥–∞–Ω–Ω—ã—Ö –æ–± —É—Å–ø–µ—à–Ω–æ–º –ø–ª–∞—Ç–µ–∂–µ');
      return;
    }
    
    const payment = msg.successful_payment;
    const chatId = msg.chat.id;
    
    logger.info(`–ü–æ–ª—É—á–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –ø–ª–∞—Ç–µ–∂–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${chatId}`);
    logger.debug(`–î–∞–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∞: ${JSON.stringify({
      telegram_payment_charge_id: payment.telegram_payment_charge_id,
      provider_payment_charge_id: payment.provider_payment_charge_id,
      currency: payment.currency,
      total_amount: payment.total_amount,
      invoice_payload: payment.invoice_payload.substring(0, 50) + '...'
    })}`);
    
    // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –ø–ª–∞—Ç–µ–∂–µ –≤ –ª–æ–≥–∞—Ö
    await prisma.paymentLog.create({
      data: {
        type: 'SUCCESSFUL_PAYMENT',
        paymentId: payment.provider_payment_charge_id || `tg_${Date.now()}_${chatId}`,
        data: JSON.stringify({
          telegramId: chatId,
          payment: {
            telegram_payment_charge_id: payment.telegram_payment_charge_id,
            provider_payment_charge_id: payment.provider_payment_charge_id,
            currency: payment.currency,
            total_amount: payment.total_amount,
          },
          payload: payment.invoice_payload,
          timestamp: new Date().toISOString()
        })
      }
    }).catch(e => logger.warn(`–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞–ø–∏—Å—å –≤ –ª–æ–≥–∞—Ö: ${e}`));
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞
    await bot.sendMessage(
      chatId,
      `‚úÖ *–ü–æ–ª—É—á–µ–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞!*\n\n–í–∞—à –ø–ª–∞—Ç–µ–∂ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è. –ü–æ–¥–ø–∏—Å–∫–∞ –±—É–¥–µ—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –≤ —Ç–µ—á–µ–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –º–∏–Ω—É—Ç.`,
      { parse_mode: 'Markdown' }
    );
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —É—Å–ø–µ—à–Ω—ã–π –ø–ª–∞—Ç–µ–∂
    try {
      await handleSuccessfulYookassaTelegramPayment(payment);
      logger.info(`–£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –ø–ª–∞—Ç–µ–∂ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${chatId}`);
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
      setTimeout(async () => {
        try {
          await bot.sendMessage(
            chatId,
            `‚úÖ *–ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω!*\n\n–í–∞—à–∞ VPN –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /subscription –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.`,
            { 
              parse_mode: 'Markdown',
              reply_markup: {
                inline_keyboard: [
                  [{ text: 'üìã –ú–æ—è –ø–æ–¥–ø–∏—Å–∫–∞', callback_data: 'my_subscription' }]
                ]
              }
            }
          );
        } catch (error) {
          logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± —É—Å–ø–µ—à–Ω–æ–π –∞–∫—Ç–∏–≤–∞—Ü–∏–∏: ${error}`);
        }
      }, 5000); // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏
    } catch (error) {
      logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞: ${error}`);
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
      try {
        await bot.sendMessage(
          chatId,
          `‚ö†Ô∏è *–í–æ–∑–Ω–∏–∫–ª–∞ –ø—Ä–æ–±–ª–µ–º–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏*\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É, —É–∫–∞–∑–∞–≤ ID –ø–ª–∞—Ç–µ–∂–∞: \`${payment.provider_payment_charge_id || '–ù–µ —É–∫–∞–∑–∞–Ω'}\``,
          { parse_mode: 'Markdown' }
        );
      } catch (msgError) {
        logger.error(`–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ: ${msgError}`);
      }
    }
  } catch (error) {
    logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞: ${error}`);
  }
}; 