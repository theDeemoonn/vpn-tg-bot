import TelegramBot, { Message } from 'node-telegram-bot-api';
import { prisma } from '../../services/database';
import { createPayment, getPaymentAmount, SubscriptionPeriod } from '../../services/payment';
import { createTelegramInvoice } from '../../services/telegramPayments';
import config from '../../config';
import logger from '../../utils/logger';
import { MessageHandler } from './types';

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /buy
 * @param bot - —ç–∫–∑–µ–º–ø–ª—è—Ä Telegram –±–æ—Ç–∞
 */
export const handleBuy: MessageHandler = (bot: TelegramBot) => async (message: Message): Promise<void> => {
  try {
    const chatId = message.chat.id;
    const telegramId = message.from?.id || 0;
    
    // –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const user = await prisma.user.findUnique({
      where: { telegramId: BigInt(telegramId) }
    });
    
    if (!user) {
      bot.sendMessage(chatId, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º.');
      return;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–∫—Ç–∏–≤–µ–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    if (!user.isActive) {
      bot.sendMessage(chatId, '‚õî –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.');
      return;
    }
    
    // –°–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–∞—Ä–∏—Ñ–∞–º–∏
    const plansMessage = `
üí∞ *–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ:*

1Ô∏è‚É£ *–ú–µ—Å—è—á–Ω—ã–π* - ${config.monthlySubscriptionPrice} ‚ÇΩ
   ‚Ä¢ 30 –¥–Ω–µ–π –¥–æ—Å—Ç—É–ø–∞
   ‚Ä¢ –ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π —Ç—Ä–∞—Ñ–∏–∫
   ‚Ä¢ ${config.defaultDownloadSpeed} Mbps —Å–∫–æ—Ä–æ—Å—Ç—å

2Ô∏è‚É£ *–ö–≤–∞—Ä—Ç–∞–ª—å–Ω—ã–π* - ${config.quarterlySubscriptionPrice} ‚ÇΩ
   ‚Ä¢ 90 –¥–Ω–µ–π –¥–æ—Å—Ç—É–ø–∞
   ‚Ä¢ –ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π —Ç—Ä–∞—Ñ–∏–∫
   ‚Ä¢ ${config.defaultDownloadSpeed} Mbps —Å–∫–æ—Ä–æ—Å—Ç—å
   ‚Ä¢ *–í—ã–≥–æ–¥–∞ ${Math.round((1 - config.quarterlySubscriptionPrice / (config.monthlySubscriptionPrice * 3)) * 100)}%*

3Ô∏è‚É£ *–ì–æ–¥–æ–≤–æ–π* - ${config.annualSubscriptionPrice} ‚ÇΩ
   ‚Ä¢ 365 –¥–Ω–µ–π –¥–æ—Å—Ç—É–ø–∞
   ‚Ä¢ –ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π —Ç—Ä–∞—Ñ–∏–∫
   ‚Ä¢ ${config.defaultDownloadSpeed} Mbps —Å–∫–æ—Ä–æ—Å—Ç—å
   ‚Ä¢ *–í—ã–≥–æ–¥–∞ ${Math.round((1 - config.annualSubscriptionPrice / (config.monthlySubscriptionPrice * 12)) * 100)}%*
    `;
    
    // –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –≤—ã–±–æ—Ä–æ–º —Ç–∞—Ä–∏—Ñ–æ–≤
    const keyboard = {
      reply_markup: {
        inline_keyboard: [
          [{ text: `1 –º–µ—Å—è—Ü - ${config.monthlySubscriptionPrice} ‚ÇΩ`, callback_data: 'buy_monthly' }],
          [{ text: `3 –º–µ—Å—è—Ü–∞ - ${config.quarterlySubscriptionPrice} ‚ÇΩ`, callback_data: 'buy_quarterly' }],
          [{ text: `12 –º–µ—Å—è—Ü–µ–≤ - ${config.annualSubscriptionPrice} ‚ÇΩ`, callback_data: 'buy_annual' }],
          [{ text: 'üéÅ –ü–æ–¥–∞—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É', callback_data: 'gift_subscription' }],
          [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'main_menu' }]
        ]
      },
      parse_mode: 'Markdown' as TelegramBot.ParseMode
    };
    
    await bot.sendMessage(chatId, plansMessage, keyboard);
  } catch (error) {
    logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã /buy: ${error}`);
    bot.sendMessage(message.chat.id, 'üòû –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
};

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ –º–µ—Ç–æ–¥–∞ –æ–ø–ª–∞—Ç—ã
 */
export async function handleSelectPaymentMethod(
  bot: TelegramBot,
  chatId: number,
  messageId: number,
  period: SubscriptionPeriod
): Promise<void> {
  try {
    // –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const user = await prisma.user.findUnique({
      where: { telegramId: BigInt(chatId) }
    });
    
    if (!user) {
      await bot.sendMessage(chatId, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º.');
      return;
    }
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã
    const amount = getPaymentAmount(period);
    const periodName = period === SubscriptionPeriod.MONTHLY 
      ? '–ú–µ—Å—è—á–Ω—ã–π' 
      : period === SubscriptionPeriod.QUARTERLY 
        ? '–ö–≤–∞—Ä—Ç–∞–ª—å–Ω—ã–π' 
        : '–ì–æ–¥–æ–≤–æ–π';
    
    const message = `
üí≥ *–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã*

–¢–∞—Ä–∏—Ñ: ${periodName}
–°—É–º–º–∞: ${amount} ‚ÇΩ

–í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω—ã–π —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:
    `;
    
    // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ —Å–ø–æ—Å–æ–±–∞–º–∏ –æ–ø–ª–∞—Ç—ã
    const keyboard: TelegramBot.InlineKeyboardButton[][] = [
      [{ text: 'üí≥ –ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–∞', callback_data: `pay_card_${period}` }]
    ];
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É Telegram Payments, –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–∞
    if (config.enableTelegramPayments && 
        config.telegramPaymentToken && 
        config.telegramPaymentToken.trim() !== '') {
      keyboard.push([{ text: 'üì± Telegram Payments', callback_data: `pay_telegram_${period}` }]);
      logger.info('–î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞ –æ–ø–ª–∞—Ç—ã —á–µ—Ä–µ–∑ Telegram Payments');
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
    keyboard.push([{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'buy' }]);
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã
    await bot.editMessageText(message, {
      chat_id: chatId,
      message_id: messageId,
      parse_mode: 'Markdown',
      reply_markup: {
        inline_keyboard: keyboard
      }
    });
  } catch (error: any) {
    logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –º–µ—Ç–æ–¥–∞ –æ–ø–ª–∞—Ç—ã: ${error.message}`);
    await bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
}

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –ø–æ–¥–∞—Ä–∫–∞
 */
export async function handleGiftSubscription(
  bot: TelegramBot,
  chatId: number,
  messageId: number
): Promise<void> {
  try {
    // –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const user = await prisma.user.findUnique({
      where: { telegramId: BigInt(chatId) }
    });
    
    if (!user) {
      await bot.sendMessage(chatId, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º.');
      return;
    }
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º –ø–µ—Ä–∏–æ–¥–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –ø–æ–¥–∞—Ä–∫–∞
    const message = `
üéÅ *–ü–æ–¥–∞—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É*

–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –ø–æ–¥–ø–∏—Å–∫–∏, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –ø–æ–¥–∞—Ä–∏—Ç—å:
    `;
    
    // –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –≤—ã–±–æ—Ä–æ–º —Ç–∞—Ä–∏—Ñ–æ–≤ –¥–ª—è –ø–æ–¥–∞—Ä–∫–∞
    const keyboard = {
      inline_keyboard: [
        [{ text: `1 –º–µ—Å—è—Ü - ${config.monthlySubscriptionPrice} ‚ÇΩ`, callback_data: 'gift_monthly' }],
        [{ text: `3 –º–µ—Å—è—Ü–∞ - ${config.quarterlySubscriptionPrice} ‚ÇΩ`, callback_data: 'gift_quarterly' }],
        [{ text: `12 –º–µ—Å—è—Ü–µ–≤ - ${config.annualSubscriptionPrice} ‚ÇΩ`, callback_data: 'gift_annual' }],
        [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'buy' }]
      ]
    };
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º –ø–µ—Ä–∏–æ–¥–∞
    await bot.editMessageText(message, {
      chat_id: chatId,
      message_id: messageId,
      parse_mode: 'Markdown',
      reply_markup: keyboard
    });
  } catch (error: any) {
    logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–æ–¥–∞—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏: ${error.message}`);
    await bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
}

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ —é–∑–µ—Ä–Ω–µ–π–º–∞ –ø–æ–ª—É—á–∞—Ç–µ–ª—è –ø–æ–¥–∞—Ä–∫–∞
 */
export async function handleRequestGiftRecipient(
  bot: TelegramBot,
  chatId: number,
  messageId: number,
  period: SubscriptionPeriod
): Promise<void> {
  try {
    // –°–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π
    const periodText = period === SubscriptionPeriod.MONTHLY
      ? "1 –º–µ—Å—è—Ü"
      : period === SubscriptionPeriod.QUARTERLY
        ? "3 –º–µ—Å—è—Ü–∞"
        : "12 –º–µ—Å—è—Ü–µ–≤";
    
    const message = `
üéÅ *–ü–æ–¥–∞—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ ${periodText}*

–í–≤–µ–¥–∏—Ç–µ @username –∏–ª–∏ ID –ø–æ–ª—É—á–∞—Ç–µ–ª—è –ø–æ–¥–∞—Ä–∫–∞:

(–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ @username –∏–ª–∏ —á–∏—Å–ª–æ–≤–æ–π ID)
    `;
    
    // –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π –æ—Ç–º–µ–Ω—ã
    const keyboard = {
      inline_keyboard: [
        [{ text: '‚¨ÖÔ∏è –û—Ç–º–µ–Ω–∞', callback_data: 'gift_subscription' }]
      ]
    };
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–ø—Ä–æ—Å–æ–º –ø–æ–ª—É—á–∞—Ç–µ–ª—è
    await bot.editMessageText(message, {
      chat_id: chatId,
      message_id: messageId,
      parse_mode: 'Markdown',
      reply_markup: keyboard
    });
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ –≥–ª–æ–±–∞–ª—å–Ω–æ–º –æ–±—ä–µ–∫—Ç–µ
    global.userStates = global.userStates || {};
    global.userStates[chatId] = {
      state: 'WAITING_FOR_GIFT_RECIPIENT',
      data: { period }
    };
    
  } catch (error: any) {
    logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—è –ø–æ–¥–∞—Ä–∫–∞: ${error.message}`);
    await bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
}

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ –º–µ—Ç–æ–¥–∞ –æ–ø–ª–∞—Ç—ã –ø–æ–¥–∞—Ä–æ—á–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏
 */
export async function handleSelectGiftPaymentMethod(
  bot: TelegramBot,
  chatId: number,
  messageId: number,
  recipientId: string,
  period: SubscriptionPeriod
): Promise<void> {
  try {
    // –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è-–æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
    const sender = await prisma.user.findUnique({
      where: { telegramId: BigInt(chatId) }
    });
    
    if (!sender) {
      await bot.sendMessage(chatId, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º.');
      return;
    }
    
    // –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è-–ø–æ–ª—É—á–∞—Ç–µ–ª—è
    const recipient = await findRecipientUser(recipientId);
    
    if (!recipient) {
      await bot.sendMessage(chatId, '‚ùå –ü–æ–ª—É—á–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ –±–æ—Ç–µ.');
      return;
    }
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã
    const amount = getPaymentAmount(period);
    const periodName = period === SubscriptionPeriod.MONTHLY 
      ? '–ú–µ—Å—è—á–Ω—ã–π' 
      : period === SubscriptionPeriod.QUARTERLY 
        ? '–ö–≤–∞—Ä—Ç–∞–ª—å–Ω—ã–π' 
        : '–ì–æ–¥–æ–≤–æ–π';
    
    let recipientName = recipient.username || recipient.firstName || recipient.telegramId.toString();
    if (recipient.username) recipientName = '@' + recipient.username;
    
    const message = `
üéÅ *–ü–æ–¥–∞—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É*

–ü–æ–ª—É—á–∞—Ç–µ–ª—å: ${recipientName}
–¢–∞—Ä–∏—Ñ: ${periodName}
–°—É–º–º–∞: ${amount} ‚ÇΩ

–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:
    `;
    
    // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ —Å–ø–æ—Å–æ–±–∞–º–∏ –æ–ø–ª–∞—Ç—ã
    const keyboard: TelegramBot.InlineKeyboardButton[][] = [
      [{ text: 'üí≥ –ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–∞', callback_data: `gift_pay_card_${period}_${recipient.telegramId}` }]
    ];
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É Telegram Payments, –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–∞
    if (config.enableTelegramPayments && 
        config.telegramPaymentToken && 
        config.telegramPaymentToken.trim() !== '') {
      keyboard.push([{ text: 'üì± Telegram Payments', callback_data: `gift_pay_telegram_${period}_${recipient.telegramId}` }]);
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
    keyboard.push([{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'gift_subscription' }]);
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã
    await bot.editMessageText(message, {
      chat_id: chatId,
      message_id: messageId,
      parse_mode: 'Markdown',
      reply_markup: {
        inline_keyboard: keyboard
      }
    });
    
    // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    if (global.userStates && global.userStates[chatId]) {
      delete global.userStates[chatId];
    }
    
  } catch (error: any) {
    logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –º–µ—Ç–æ–¥–∞ –æ–ø–ª–∞—Ç—ã –ø–æ–¥–∞—Ä–∫–∞: ${error.message}`);
    await bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
}

/**
 * –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ username –∏–ª–∏ ID
 */
async function findRecipientUser(recipientId: string) {
  let recipient;
  
  // –ï—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å @, –∏—â–µ–º –ø–æ username
  if (recipientId.startsWith('@')) {
    const username = recipientId.substring(1);
    recipient = await prisma.user.findFirst({
      where: { username }
    });
  } else {
    // –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ø–æ —á–∏—Å–ª–æ–≤–æ–º—É ID
    try {
      const telegramId = BigInt(recipientId);
      recipient = await prisma.user.findUnique({
        where: { telegramId }
      });
    } catch (e) {
      // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –≤ —á–∏—Å–ª–æ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º null
      return null;
    }
  }
  
  return recipient;
} 