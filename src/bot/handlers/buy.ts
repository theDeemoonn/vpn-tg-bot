import TelegramBot, { Message } from 'node-telegram-bot-api';
import { prisma } from '../../services/database';
import {  getPaymentAmount, SubscriptionPeriod } from '../../services/payment';
import config from '../../config';
import logger from '../../utils/logger';
import { MessageHandler } from './types';

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /buy
 * @param bot - —ç–∫–∑–µ–º–ø–ª—è—Ä Telegram –±–æ—Ç–∞
 */
export const handleBuy: MessageHandler = (bot: TelegramBot) => async (message: Message): Promise<void> => {
  try {
    const chatId = message.chat.id;
    const telegramId = message.from?.id || 0;
    
    // –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const user = await prisma.user.findUnique({
      where: { telegramId: BigInt(telegramId) }
    });
    
    if (!user) {
      bot.sendMessage(chatId, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º.');
      return;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–∫—Ç–∏–≤–µ–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    if (!user.isActive) {
      bot.sendMessage(chatId, '‚õî –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.');
      return;
    }
    
    // –°–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–∞—Ä–∏—Ñ–∞–º–∏
    const plansMessage = `
üí∞ *–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ:*

1Ô∏è‚É£ *–ú–µ—Å—è—á–Ω—ã–π* - ${config.monthlySubscriptionPrice} ‚ÇΩ
   ‚Ä¢ 30 –¥–Ω–µ–π –¥–æ—Å—Ç—É–ø–∞
   ‚Ä¢ –ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π —Ç—Ä–∞—Ñ–∏–∫
   ‚Ä¢ ${config.defaultDownloadSpeed} Mbps —Å–∫–æ—Ä–æ—Å—Ç—å

2Ô∏è‚É£ *–ö–≤–∞—Ä—Ç–∞–ª—å–Ω—ã–π* - ${config.quarterlySubscriptionPrice} ‚ÇΩ
   ‚Ä¢ 90 –¥–Ω–µ–π –¥–æ—Å—Ç—É–ø–∞
   ‚Ä¢ –ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π —Ç—Ä–∞—Ñ–∏–∫
   ‚Ä¢ ${config.defaultDownloadSpeed} Mbps —Å–∫–æ—Ä–æ—Å—Ç—å
   ‚Ä¢ *–í—ã–≥–æ–¥–∞ ${Math.round((1 - config.quarterlySubscriptionPrice / (config.monthlySubscriptionPrice * 3)) * 100)}%*

3Ô∏è‚É£ *–ì–æ–¥–æ–≤–æ–π* - ${config.annualSubscriptionPrice} ‚ÇΩ
   ‚Ä¢ 365 –¥–Ω–µ–π –¥–æ—Å—Ç—É–ø–∞
   ‚Ä¢ –ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π —Ç—Ä–∞—Ñ–∏–∫
   ‚Ä¢ ${config.defaultDownloadSpeed} Mbps —Å–∫–æ—Ä–æ—Å—Ç—å
   ‚Ä¢ *–í—ã–≥–æ–¥–∞ ${Math.round((1 - config.annualSubscriptionPrice / (config.monthlySubscriptionPrice * 12)) * 100)}%*
    `;
    
    // –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –≤—ã–±–æ—Ä–æ–º —Ç–∞—Ä–∏—Ñ–æ–≤
    const keyboard = {
      reply_markup: {
        inline_keyboard: [
          [{ text: `1 –º–µ—Å—è—Ü - ${config.monthlySubscriptionPrice} ‚ÇΩ`, callback_data: 'buy_monthly' }],
          [{ text: `3 –º–µ—Å—è—Ü–∞ - ${config.quarterlySubscriptionPrice} ‚ÇΩ`, callback_data: 'buy_quarterly' }],
          [{ text: `12 –º–µ—Å—è—Ü–µ–≤ - ${config.annualSubscriptionPrice} ‚ÇΩ`, callback_data: 'buy_annual' }],
          [{ text: 'üéÅ –ü–æ–¥–∞—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É', callback_data: 'gift_subscription' }],
          [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'main_menu' }]
        ]
      },
      parse_mode: 'Markdown' as TelegramBot.ParseMode
    };
    
    await bot.sendMessage(chatId, plansMessage, keyboard);
  } catch (error) {
    logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã /buy: ${error}`);
    bot.sendMessage(message.chat.id, 'üòû –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
};

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ –º–µ—Ç–æ–¥–∞ –æ–ø–ª–∞—Ç—ã
 */
export async function handleSelectPaymentMethod(
  bot: TelegramBot,
  chatId: number,
  messageId: number,
  period: SubscriptionPeriod,
  subscriptionId?: number
): Promise<void> {
  try {
    // –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const user = await prisma.user.findUnique({
      where: { telegramId: BigInt(chatId) }
    });
    
    if (!user) {
      await bot.sendMessage(chatId, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º.');
      return;
    }
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã
    const amount = getPaymentAmount(period);
    const periodName = period === SubscriptionPeriod.MONTHLY 
      ? '–ú–µ—Å—è—á–Ω—ã–π' 
      : period === SubscriptionPeriod.QUARTERLY 
        ? '–ö–≤–∞—Ä—Ç–∞–ª—å–Ω—ã–π' 
        : '–ì–æ–¥–æ–≤–æ–π';
    
    const message = `
üí≥ *–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã*

–¢–∞—Ä–∏—Ñ: ${periodName}
–°—É–º–º–∞: ${amount} ‚ÇΩ
${subscriptionId ? '–ü—Ä–æ–¥–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏' : '–ù–æ–≤–∞—è –ø–æ–¥–ø–∏—Å–∫–∞'}

–í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω—ã–π —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:
    `;
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º callback data —Å —É—á–µ—Ç–æ–º ID –ø–æ–¥–ø–∏—Å–∫–∏, –µ—Å–ª–∏ –µ—Å—Ç—å
    const periodStr = period.toString();
    const subscriptionSuffix = subscriptionId ? `_${subscriptionId}` : '';
    
    // –£–ø—Ä–æ—â—ë–Ω–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –µ–¥–∏–Ω–æ–π –∫–Ω–æ–ø–∫–æ–π –æ–ø–ª–∞—Ç—ã —á–µ—Ä–µ–∑ Telegram
    const keyboard: TelegramBot.InlineKeyboardButton[][] = [];
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –ÆKassa —á–µ—Ä–µ–∑ Telegram
    if (config.yookassaTelegramEnabled) {
      keyboard.push([{ 
        text: 'üí≥ –û–ø–ª–∞—Ç–∏—Ç—å —á–µ—Ä–µ–∑ Telegram', 
        callback_data: `pay_telegram_${periodStr}${subscriptionSuffix}` 
      }]);
      
      logger.info('–î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞ –æ–ø–ª–∞—Ç—ã —á–µ—Ä–µ–∑ –ÆKassa –≤ Telegram');
    } else if (config.telegramPaymentToken && config.telegramPaymentToken.trim() !== '') {
      // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Telegram Payments (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–∞)
      keyboard.push([{ 
        text: 'üí≥ –û–ø–ª–∞—Ç–∏—Ç—å —á–µ—Ä–µ–∑ Telegram', 
        callback_data: `pay_telegram_direct_${periodStr}${subscriptionSuffix}` 
      }]);
      
      logger.info('–î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞ –ø—Ä—è–º–æ–π –æ–ø–ª–∞—Ç—ã —á–µ—Ä–µ–∑ Telegram');
    }
    
    // –í–µ–±-—Å—Å—ã–ª–∫–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã —á–µ—Ä–µ–∑ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ÆKassa (–µ—Å–ª–∏ –ø–µ—Ä–≤—ã–µ –¥–≤–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã)
    if (keyboard.length === 0) {
      keyboard.push([{ 
        text: 'üí≥ –û–ø–ª–∞—Ç–∏—Ç—å –±–∞–Ω–∫–æ–≤—Å–∫–æ–π –∫–∞—Ä—Ç–æ–π', 
        callback_data: `pay_card_${periodStr}${subscriptionSuffix}` 
      }]);
      
      logger.info('–î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞ –æ–ø–ª–∞—Ç—ã —á–µ—Ä–µ–∑ –≤–µ–±-—Å—Ç—Ä–∞–Ω–∏—Ü—É');
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
    keyboard.push([{ text: 'üîô –ù–∞–∑–∞–¥ –∫ —Ç–∞—Ä–∏—Ñ–∞–º', callback_data: subscriptionId ? `renew_subscription_${subscriptionId}` : 'buy' }]);
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º –º–µ—Ç–æ–¥–∞ –æ–ø–ª–∞—Ç—ã
    await bot.editMessageText(message, {
      chat_id: chatId,
      message_id: messageId,
      parse_mode: 'Markdown',
      reply_markup: {
        inline_keyboard: keyboard
      }
    });
    
    // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    if (global.userStates && global.userStates[chatId]) {
      delete global.userStates[chatId];
    }
    
  } catch (error: any) {
    logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –º–µ—Ç–æ–¥–∞ –æ–ø–ª–∞—Ç—ã: ${error.message}`);
    await bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
}

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –ø–æ–¥–∞—Ä–∫–∞
 */
export async function handleGiftSubscription(
  bot: TelegramBot,
  chatId: number,
  messageId: number
): Promise<void> {
  try {
    // –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const user = await prisma.user.findUnique({
      where: { telegramId: BigInt(chatId) }
    });
    
    if (!user) {
      await bot.sendMessage(chatId, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º.');
      return;
    }
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º –ø–µ—Ä–∏–æ–¥–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –ø–æ–¥–∞—Ä–∫–∞
    const message = `
üéÅ *–ü–æ–¥–∞—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É*

–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –ø–æ–¥–ø–∏—Å–∫–∏, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –ø–æ–¥–∞—Ä–∏—Ç—å:
    `;
    
    // –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –≤—ã–±–æ—Ä–æ–º —Ç–∞—Ä–∏—Ñ–æ–≤ –¥–ª—è –ø–æ–¥–∞—Ä–∫–∞
    const keyboard = {
      inline_keyboard: [
        [{ text: `1 –º–µ—Å—è—Ü - ${config.monthlySubscriptionPrice} ‚ÇΩ`, callback_data: 'gift_monthly' }],
        [{ text: `3 –º–µ—Å—è—Ü–∞ - ${config.quarterlySubscriptionPrice} ‚ÇΩ`, callback_data: 'gift_quarterly' }],
        [{ text: `12 –º–µ—Å—è—Ü–µ–≤ - ${config.annualSubscriptionPrice} ‚ÇΩ`, callback_data: 'gift_annual' }],
        [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'buy' }]
      ]
    };
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º –ø–µ—Ä–∏–æ–¥–∞
    await bot.editMessageText(message, {
      chat_id: chatId,
      message_id: messageId,
      parse_mode: 'Markdown',
      reply_markup: keyboard
    });
  } catch (error: any) {
    logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–æ–¥–∞—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏: ${error.message}`);
    await bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
}

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ —é–∑–µ—Ä–Ω–µ–π–º–∞ –ø–æ–ª—É—á–∞—Ç–µ–ª—è –ø–æ–¥–∞—Ä–∫–∞
 */
export async function handleRequestGiftRecipient(
  bot: TelegramBot,
  chatId: number,
  messageId: number,
  period: SubscriptionPeriod
): Promise<void> {
  try {
    // –°–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π
    const periodText = period === SubscriptionPeriod.MONTHLY
      ? "1 –º–µ—Å—è—Ü"
      : period === SubscriptionPeriod.QUARTERLY
        ? "3 –º–µ—Å—è—Ü–∞"
        : "12 –º–µ—Å—è—Ü–µ–≤";
    
    const message = `
üéÅ *–ü–æ–¥–∞—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ ${periodText}*

–í–≤–µ–¥–∏—Ç–µ @username –∏–ª–∏ ID –ø–æ–ª—É—á–∞—Ç–µ–ª—è –ø–æ–¥–∞—Ä–∫–∞:

(–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ @username –∏–ª–∏ —á–∏—Å–ª–æ–≤–æ–π ID)
    `;
    
    // –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π –æ—Ç–º–µ–Ω—ã
    const keyboard = {
      inline_keyboard: [
        [{ text: '‚¨ÖÔ∏è –û—Ç–º–µ–Ω–∞', callback_data: 'gift_subscription' }]
      ]
    };
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–ø—Ä–æ—Å–æ–º –ø–æ–ª—É—á–∞—Ç–µ–ª—è
    await bot.editMessageText(message, {
      chat_id: chatId,
      message_id: messageId,
      parse_mode: 'Markdown',
      reply_markup: keyboard
    });
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ –≥–ª–æ–±–∞–ª—å–Ω–æ–º –æ–±—ä–µ–∫—Ç–µ
    global.userStates = global.userStates || {};
    global.userStates[chatId] = {
      state: 'waiting_for_gift_recipient',
      period: period
    };
  } catch (error: any) {
    logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—è –ø–æ–¥–∞—Ä–∫–∞: ${error.message}`);
    await bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
}

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ –º–µ—Ç–æ–¥–∞ –æ–ø–ª–∞—Ç—ã –ø–æ–¥–∞—Ä–æ—á–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏
 */
export async function handleSelectGiftPaymentMethod(
  bot: TelegramBot,
  chatId: number,
  messageId: number,
  recipientId: string,
  period: SubscriptionPeriod
): Promise<void> {
  try {
    // –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è-–æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
    const sender = await prisma.user.findUnique({
      where: { telegramId: BigInt(chatId) }
    });
    
    if (!sender) {
      await bot.sendMessage(chatId, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º.');
      return;
    }

    // –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è-–ø–æ–ª—É—á–∞—Ç–µ–ª—è
    const recipient = await findRecipientUser(recipientId);
    
    if (!recipient) {
      await bot.editMessageText(
        `‚ùå –ü–æ–ª—É—á–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ ID –∏–ª–∏ —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø–æ–ª—É—á–∞—Ç–µ–ª—å —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ –±–æ—Ç–µ.`,
        {
          chat_id: chatId,
          message_id: messageId,
          reply_markup: {
            inline_keyboard: [
              [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: `gift_${period}` }]
            ]
          }
        }
      );
      return;
    }

    // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –ø–æ–¥–∞—Ä–æ—á–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–µ
    const giftSubscription = await prisma.giftSubscription.create({
      data: {
        senderId: sender.id,
        recipientId: recipient.id,
        status: 'PENDING',
        period: period
      }
    });

    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã
    const amount = getPaymentAmount(period);
    const periodName = period === SubscriptionPeriod.MONTHLY
      ? '–º–µ—Å—è—á–Ω—ã–π'
      : period === SubscriptionPeriod.QUARTERLY
        ? '–∫–≤–∞—Ä—Ç–∞–ª—å–Ω—ã–π'
        : '–≥–æ–¥–æ–≤–æ–π';

    const recipientName = recipient.username
      ? '@' + recipient.username
      : recipient.firstName
        ? recipient.firstName
        : 'ID: ' + recipient.telegramId.toString();

    const message = `
üéÅ *–ü–æ–¥–∞—Ä–æ—á–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞*

–ü–æ–ª—É—á–∞—Ç–µ–ª—å: ${recipientName}
–¢–∞—Ä–∏—Ñ: ${periodName}
–°—É–º–º–∞: ${amount} ‚ÇΩ

–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:
    `;

    // –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –≤—ã–±–æ—Ä–æ–º —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã
    const keyboard: TelegramBot.InlineKeyboardButton[][] = [];
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –ÆKassa —á–µ—Ä–µ–∑ Telegram
    if (config.yookassaTelegramEnabled) {
      keyboard.push([{ 
        text: 'üí≥ –û–ø–ª–∞—Ç–∏—Ç—å —á–µ—Ä–µ–∑ Telegram', 
        callback_data: `pay_gift_telegram_${giftSubscription.id}` 
      }]);
    } else if (config.telegramPaymentToken && config.telegramPaymentToken.trim() !== '') {
      // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Telegram Payments
      keyboard.push([{ 
        text: 'üí≥ –û–ø–ª–∞—Ç–∏—Ç—å —á–µ—Ä–µ–∑ Telegram', 
        callback_data: `pay_gift_telegram_direct_${giftSubscription.id}` 
      }]);
    }
    
    // –í–µ–±-—Å—Å—ã–ª–∫–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã —á–µ—Ä–µ–∑ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ÆKassa
    if (keyboard.length === 0) {
      keyboard.push([{ 
        text: 'üí≥ –û–ø–ª–∞—Ç–∏—Ç—å –±–∞–Ω–∫–æ–≤—Å–∫–æ–π –∫–∞—Ä—Ç–æ–π', 
        callback_data: `pay_gift_card_${giftSubscription.id}` 
      }]);
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
    keyboard.push([{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'gift_subscription' }]);
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º –º–µ—Ç–æ–¥–∞ –æ–ø–ª–∞—Ç—ã
    await bot.editMessageText(message, {
      chat_id: chatId,
      message_id: messageId,
      parse_mode: 'Markdown',
      reply_markup: {
        inline_keyboard: keyboard
      }
    });
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    if (global.userStates && global.userStates[chatId]) {
      delete global.userStates[chatId];
    }
  } catch (error: any) {
    logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –º–µ—Ç–æ–¥–∞ –æ–ø–ª–∞—Ç—ã –ø–æ–¥–∞—Ä–æ—á–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏: ${error.message}`);
    await bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
}

/**
 * –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è-–ø–æ–ª—É—á–∞—Ç–µ–ª—è –ø–æ ID –∏–ª–∏ username
 */
async function findRecipientUser(recipientId: string) {
  try {
    let recipient;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ recipientId —á–∏—Å–ª–æ–º –∏–ª–∏ —Å—Ç—Ä–æ–∫–æ–π —Å @
    if (/^\d+$/.test(recipientId)) {
      // –ï—Å–ª–∏ —ç—Ç–æ —á–∏—Å–ª–æ, –∏—â–µ–º –ø–æ telegramId
      recipient = await prisma.user.findUnique({
        where: { telegramId: BigInt(recipientId) }
      });
    } else if (recipientId.startsWith('@')) {
      // –ï—Å–ª–∏ —ç—Ç–æ @username, –∏—â–µ–º –ø–æ username –±–µ–∑ @
      recipient = await prisma.user.findFirst({
        where: { username: recipientId.substring(1) }
      });
    } else {
      // –í –¥—Ä—É–≥–∏—Ö —Å–ª—É—á–∞—è—Ö –ø—Ä–æ–±—É–µ–º –∏—Å–∫–∞—Ç—å –ø–æ username –∫–∞–∫ –µ—Å—Ç—å
      recipient = await prisma.user.findFirst({
        where: { username: recipientId }
      });
    }
    
    return recipient;
  } catch (error) {
    logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—è: ${error}`);
    return null;
  }
} 