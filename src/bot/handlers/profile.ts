import TelegramBot, { Message } from 'node-telegram-bot-api';
import { getUserActiveSubscriptions } from '../../services/user';
import { prisma } from '../../services/database';
import logger from '../../utils/logger';
import { MessageHandler } from './types';

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /profile
 * @param bot - —ç–∫–∑–µ–º–ø–ª—è—Ä Telegram –±–æ—Ç–∞
 */
export const handleProfile: MessageHandler = (bot: TelegramBot) => async (message: Message): Promise<void> => {
  try {
    const chatId = message.chat.id;
    const telegramId = message.from?.id || 0;
    
    // –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const user = await prisma.user.findUnique({
      where: { telegramId: BigInt(telegramId) }
    });
    
    if (!user) {
      bot.sendMessage(chatId, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º.');
      return;
    }
    
    // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const subscriptions = await getUserActiveSubscriptions(user.id);
    
    // –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø–ª–∞—Ç–µ–∂–µ–π
    const payments = await prisma.payment.findMany({
      where: { userId: user.id },
      orderBy: { createdAt: 'desc' },
      take: 5
    });
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø—Ä–æ—Ñ–∏–ª–µ
    let profileMessage = `
üë§ *–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å*

üÜî ID: ${user.id}
üë§ –ò–º—è: ${user.firstName} ${user.lastName || ''}
${user.username ? `üìù Username: @${user.username}` : ''}
üìÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: ${new Date(user.createdAt).toLocaleDateString()}
üåê –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫: ${subscriptions.length}
    `;
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –ø–ª–∞—Ç–µ–∂–∞—Ö
    if (payments.length > 0) {
      profileMessage += '\nüí≥ *–ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∏:*\n';
      
      for (const payment of payments) {
        const date = new Date(payment.createdAt).toLocaleDateString();
        profileMessage += `${date} - ${payment.amount} ${payment.currency} (${payment.status === 'SUCCEEDED' ? '‚úÖ' : payment.status === 'PENDING' ? '‚è≥' : '‚ùå'})\n`;
      }
    }
    
    // –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –æ–ø—Ü–∏—è–º–∏
    const keyboard = {
      reply_markup: {
        inline_keyboard: [
          [
            { text: 'üîë –ú–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏', callback_data: 'subscription' },
            { text: 'üí≥ –ò—Å—Ç–æ—Ä–∏—è –ø–ª–∞—Ç–µ–∂–µ–π', callback_data: 'payment_history' }
          ],
          [
            { text: '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏', callback_data: 'settings' },
            { text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'main_menu' }
          ]
        ]
      },
      parse_mode: 'Markdown' as TelegramBot.ParseMode
    };
    
    await bot.sendMessage(chatId, profileMessage, keyboard);
  } catch (error) {
    logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã /profile: ${error}`);
    bot.sendMessage(message.chat.id, 'üòû –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
}; 