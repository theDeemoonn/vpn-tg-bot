import TelegramBot, { CallbackQuery, Message } from 'node-telegram-bot-api';
import { prisma } from '../../services/database';
import { createPayment, getPaymentAmount, getSubscriptionDuration, SubscriptionPeriod } from '../../services/payment';
import { generateClientConfig } from '../../services/vpn';
import logger from '../../utils/logger';
import { CallbackQueryHandler } from './types';
import { handleHelp } from './help';
import { handleProfile } from './profile';
import { handleBuy, handleSelectPaymentMethod } from './buy';
import { handleReferral } from './referral';
import { handleSubscription } from './subscription';
import * as subscriptionService from '../../services/subscription';
import { handleFaqCategory, handleFaqItem, handleFaqSearch, handleFaq } from './faq';
import * as qrcodeService from '../../services/qrcode';

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–æ–≤ (inline –∫–Ω–æ–ø–æ–∫)
 * @param bot - —ç–∫–∑–µ–º–ø–ª—è—Ä Telegram –±–æ—Ç–∞
 */
export const handleCallbackQuery: CallbackQueryHandler = (bot: TelegramBot) => async (query: CallbackQuery): Promise<void> => {
  try {
    const chatId = query.message?.chat.id;
    const messageId = query.message?.message_id;
    const callbackData = query.data;
    
    if (!chatId || !messageId || !callbackData) {
      return;
    }
    
    // –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º acknowledgment –¥–ª—è callback query
    await bot.answerCallbackQuery(query.id);
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö callback data
    if (callbackData === 'main_menu') {
      // –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
      const welcomeMessage = `
üîê *–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é VPN Bot*

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:
      `;
      
      const keyboard = {
        reply_markup: {
          inline_keyboard: [
            [
              { text: 'üí≥ –ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É', callback_data: 'buy' },
              { text: 'üîë –ú–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏', callback_data: 'subscription' }
            ],
            [
              { text: 'üë§ –ü—Ä–æ—Ñ–∏–ª—å', callback_data: 'profile' },
              { text: 'üë• –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞', callback_data: 'referral' }
            ],
            [
              { text: '‚ùì –ü–æ–º–æ—â—å', callback_data: 'help' }
            ]
          ]
        },
        parse_mode: 'Markdown' as TelegramBot.ParseMode
      };
      
      await bot.editMessageText(welcomeMessage, {
        chat_id: chatId,
        message_id: messageId,
        ...keyboard
      });
    } else if (callbackData === 'buy') {
      // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∫—É–ø–∫–∏
      const message = { chat: { id: chatId }, from: query.from } as Message;
      await handleBuy(bot)(message);
    } else if (callbackData === 'subscription') {
      // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥–ø–∏—Å–æ–∫
      const message = { chat: { id: chatId }, from: query.from } as Message;
      await handleSubscription(bot)(message);
    } else if (callbackData === 'profile') {
      // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Ñ–∏–ª—è
      const message = { chat: { id: chatId }, from: query.from } as Message;
      await handleProfile(bot)(message);
    } else if (callbackData === 'help') {
      // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–º–æ—â–∏
      const message = { chat: { id: chatId }, from: query.from } as Message;
      await handleHelp(bot)(message);
    } else if (callbackData === 'referral') {
      // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã
      const message = { chat: { id: chatId }, from: query.from } as Message;
      await handleReferral(bot)(message);
    } else if (callbackData === 'faq') {
      // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ FAQ
      const message = { chat: { id: chatId }, from: query.from } as Message;
      await handleFaq(bot)(message);
    } else if (callbackData.startsWith('faq_category_')) {
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ FAQ
      const category = callbackData.replace('faq_category_', '');
      await handleFaqCategory(bot, chatId, messageId, category);
    } else if (callbackData.startsWith('faq_item_')) {
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —ç–ª–µ–º–µ–Ω—Ç–∞ FAQ
      const itemId = parseInt(callbackData.replace('faq_item_', ''), 10);
      await handleFaqItem(bot, chatId, messageId, itemId);
    } else if (callbackData === 'faq_search') {
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –ø–æ–∏—Å–∫ –ø–æ FAQ
      await handleFaqSearch(bot, chatId, messageId);
    } else if (callbackData.startsWith('buy_')) {
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∞—Ä–∏—Ñ–∞ –¥–ª—è –ø–æ–∫—É–ø–∫–∏
      const planType = callbackData.replace('buy_', '');
      
      let period: SubscriptionPeriod;
      
      switch (planType) {
        case 'monthly':
          period = SubscriptionPeriod.MONTHLY;
          break;
        case 'quarterly':
          period = SubscriptionPeriod.QUARTERLY;
          break;
        case 'annual':
          period = SubscriptionPeriod.ANNUAL;
          break;
        default:
          period = SubscriptionPeriod.MONTHLY;
      }
      
      // –í–º–µ—Å—Ç–æ —Å–æ–∑–¥–∞–Ω–∏—è URL –¥–ª—è –æ–ø–ª–∞—Ç—ã –Ω–∞–ø—Ä—è–º—É—é, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –º–µ—Ç–æ–¥–∞ –æ–ø–ª–∞—Ç—ã
      await handleSelectPaymentMethod(bot, chatId, messageId, period);
    } else if (callbackData.startsWith('pay_card_')) {
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –±–∞–Ω–∫–æ–≤—Å–∫–æ–π –∫–∞—Ä—Ç—ã
      const planType = callbackData.replace('pay_card_', '');
      
      let period: SubscriptionPeriod;
      
      switch (planType) {
        case 'monthly':
          period = SubscriptionPeriod.MONTHLY;
          break;
        case 'quarterly':
          period = SubscriptionPeriod.QUARTERLY;
          break;
        case 'annual':
          period = SubscriptionPeriod.ANNUAL;
          break;
        default:
          period = SubscriptionPeriod.MONTHLY;
      }
      
      // –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const user = await prisma.user.findUnique({
        where: { telegramId: BigInt(query.from?.id || 0) }
      });
      
      if (!user) {
        bot.sendMessage(chatId, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º.');
        return;
      }
      
      // –°–æ–∑–¥–∞–µ–º URL –¥–ª—è –æ–ø–ª–∞—Ç—ã
      const returnUrl = `https://t.me/${(await bot.getMe()).username}`;
      const paymentUrl = await createPayment(user, period, returnUrl);
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Å—Å—ã–ª–∫–æ–π –Ω–∞ –æ–ø–ª–∞—Ç—É
      const paymentMessage = `
üí≥ *–û–ø–ª–∞—Ç–∞ –ø–æ–¥–ø–∏—Å–∫–∏*

–¢–∞—Ä–∏—Ñ: ${period === SubscriptionPeriod.MONTHLY ? '–ú–µ—Å—è—á–Ω—ã–π' :
        period === SubscriptionPeriod.QUARTERLY ? '–ö–≤–∞—Ä—Ç–∞–ª—å–Ω—ã–π' : '–ì–æ–¥–æ–≤–æ–π'}
–°—É–º–º–∞: ${getPaymentAmount(period)} ‚ÇΩ
–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${getSubscriptionDuration(period)} –¥–Ω–µ–π

–î–ª—è –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ üëá
      `;
      
      const keyboard = {
        reply_markup: {
          inline_keyboard: [
            [{ text: 'üí∞ –ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ', url: paymentUrl }],
            [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'buy' }]
          ]
        },
        parse_mode: 'Markdown' as TelegramBot.ParseMode
      };
      
      await bot.editMessageText(paymentMessage, {
        chat_id: chatId,
        message_id: messageId,
        ...keyboard
      });
    } else if (callbackData.startsWith('pay_telegram_')) {
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –æ–ø–ª–∞—Ç—ã —á–µ—Ä–µ–∑ Telegram Payments
      const planType = callbackData.replace('pay_telegram_', '');
      let period: SubscriptionPeriod;
      
      switch (planType) {
        case 'monthly':
          period = SubscriptionPeriod.MONTHLY;
          break;
        case 'quarterly':
          period = SubscriptionPeriod.QUARTERLY;
          break;
        case 'annual':
          period = SubscriptionPeriod.ANNUAL;
          break;
        default:
          period = SubscriptionPeriod.MONTHLY;
      }
      
      // –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const user = await prisma.user.findUnique({
        where: { telegramId: BigInt(query.from?.id || 0) }
      });
      
      if (!user) {
        bot.sendMessage(chatId, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º.');
        return;
      }
      
      try {
        // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–≤–æ–π—Å–∞
        const { createTelegramInvoice } = require('../../services/telegramPayments');
        
        // –°–æ–∑–¥–∞–µ–º –∏–Ω–≤–æ–π—Å –¥–ª—è –æ–ø–ª–∞—Ç—ã —á–µ—Ä–µ–∑ Telegram
        const invoiceResult = await createTelegramInvoice(bot, chatId, user, period);
        
        if (!invoiceResult.success) {
          logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–Ω–≤–æ–π—Å–∞: ${invoiceResult.error}`);
          await bot.sendMessage(chatId, `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞: ${invoiceResult.error}`);
          return;
        }
        
        logger.info(`–°–æ–∑–¥–∞–Ω –∏–Ω–≤–æ–π—Å Telegram Payments –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.telegramId}`);
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–ª–∞—Ç–µ–∂–µ
        await bot.sendMessage(chatId, `‚úÖ –°—á–µ—Ç –Ω–∞ –æ–ø–ª–∞—Ç—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞.`);
      } catch (error) {
        logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–ø–ª–∞—Ç—ã —á–µ—Ä–µ–∑ Telegram: ${error instanceof Error ? error.message : String(error)}`);
        await bot.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã.');
      }
    } else if (callbackData.startsWith('get_config_')) {
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
      const subscriptionId = parseInt(callbackData.replace('get_config_', ''), 10);
      
      // –ù–∞—Ö–æ–¥–∏–º –ø–æ–¥–ø–∏—Å–∫—É
      const subscription = await prisma.subscription.findUnique({
        where: { id: subscriptionId },
        include: {
          user: true,
          vpnServer: true
        }
      });
      
      if (!subscription) {
        bot.sendMessage(chatId, '‚ùå –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.');
        return;
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–¥–ø–∏—Å–∫–∞ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
      if (subscription.user.telegramId !== BigInt(query.from?.id || 0)) {
        bot.sendMessage(chatId, '‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –ø–æ–¥–ø–∏—Å–∫–µ.');
        return;
      }
      
      // –ï—Å–ª–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –µ–µ
      if (!subscription.vpnConfig) {
        await generateClientConfig(subscription);
        
        // –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
        const updatedSubscription = await prisma.subscription.findUnique({
          where: { id: subscriptionId },
          include: {
            user: true,
            vpnServer: true
          }
        });
        
        if (!updatedSubscription || !updatedSubscription.vpnConfig) {
          bot.sendMessage(chatId, '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é.');
          return;
        }
        
        subscription.vpnConfig = updatedSubscription.vpnConfig;
      }
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤ –≤–∏–¥–µ —Ñ–∞–π–ª–∞
      const configBuffer = Buffer.from(subscription.vpnConfig);
      
      const fileOptions = {
        filename: `vpn_config_${subscription.id}.json`,
        contentType: 'application/json'
      };
      
      await bot.sendDocument(chatId, configBuffer, {
        caption: 'üîê –í–∞—à–∞ VPN –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≥–æ—Ç–æ–≤–∞! –ò–º–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ —ç—Ç–æ—Ç —Ñ–∞–π–ª –≤ –∫–ª–∏–µ–Ω—Ç Xray.'
      }, fileOptions);
      
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º QR-–∫–æ–¥ –¥–ª—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
      try {
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º QR-–∫–æ–¥ –¥–ª—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        const qrCodePath = await qrcodeService.generateVpnConfigQrCode(
          subscription.vpnConfig,
          subscription.userId,
          subscription.id
        );
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º QR-–∫–æ–¥
        await bot.sendPhoto(chatId, qrCodePath, {
          caption: 'üì± –û—Ç—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ —ç—Ç–æ—Ç QR-–∫–æ–¥ –º–æ–±–∏–ª—å–Ω—ã–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ VPN.'
        });
        
        // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª QR-–∫–æ–¥–∞
        qrcodeService.removeQrCodeFile(qrCodePath);
      } catch (error: any) {
        logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ QR-–∫–æ–¥–∞: ${error instanceof Error ? error.message : String(error)}`);
        // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, —Ç–∞–∫ –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞
      }
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ —É—Å—Ç–∞–Ω–æ–≤–∫–µ
      const instructionMessage = `
üìù *–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ —É—Å—Ç–∞–Ω–æ–≤–∫–µ:*

1. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∫–ª–∏–µ–Ω—Ç Xray –¥–ª—è –≤–∞—à–µ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
2. –ò–º–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–ª–∏ –æ—Ç—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ QR-–∫–æ–¥
3. –ü–æ–¥–∫–ª—é—á–∏—Ç–µ—Å—å –∫ VPN

–î–ª—è –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /help
      `;
      
      const keyboard = {
        reply_markup: {
          inline_keyboard: [
            [{ text: '‚ùì –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ —É—Å—Ç–∞–Ω–æ–≤–∫–µ', callback_data: 'help' }],
            [{ text: 'üîô –ù–∞–∑–∞–¥ –∫ –ø–æ–¥–ø–∏—Å–∫–∞–º', callback_data: 'subscription' }]
          ]
        },
        parse_mode: 'Markdown' as TelegramBot.ParseMode
      };
      
      await bot.sendMessage(chatId, instructionMessage, keyboard);
    } else if (callbackData.startsWith('help_')) {
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ–º–æ—â–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º
      const platform = callbackData.replace('help_', '');
      let helpText = '';
      
      switch (platform) {
        case 'windows':
          helpText = `
üì± *–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ —É—Å—Ç–∞–Ω–æ–≤–∫–µ VPN –Ω–∞ Windows*

1. –°–∫–∞—á–∞–π—Ç–µ –∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ V2rayN —Å –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–≥–æ —Å–∞–π—Ç–∞:
   https://github.com/2dust/v2rayN/releases

2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ V2rayN

3. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –º–µ–Ω—é (—Ç—Ä–∏ –ø–æ–ª–æ—Å–∫–∏) —Å–ª–µ–≤–∞ –≤–≤–µ—Ä—Ö—É

4. –í—ã–±–µ—Ä–∏—Ç–µ "Import config from file"

5. –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏, –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –æ—Ç –±–æ—Ç–∞

6. –ü–æ—Å–ª–µ –∏–º–ø–æ—Ä—Ç–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à —Å–µ—Ä–≤–µ—Ä –∏–∑ —Å–ø–∏—Å–∫–∞ –∏ –Ω–∞–∂–º–∏—Ç–µ "Set as active server"

7. VPN –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω

–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –Ω–∞—à—É –ø–æ–¥–¥–µ—Ä–∂–∫—É.
          `;
          break;
          
        case 'macos':
          helpText = `
üì± *–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ —É—Å—Ç–∞–Ω–æ–≤–∫–µ VPN –Ω–∞ macOS*

1. –°–∫–∞—á–∞–π—Ç–µ –∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ ClashX —Å –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–≥–æ —Å–∞–π—Ç–∞:
   https://github.com/yichengchen/clashX/releases

2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ ClashX

3. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∏–∫–æ–Ω–∫—É ClashX –≤ —Å—Ç—Ä–æ–∫–µ –º–µ–Ω—é

4. –í—ã–±–µ—Ä–∏—Ç–µ "Config" -> "Import" -> "Import from file"

5. –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏, –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –æ—Ç –±–æ—Ç–∞

6. –ü–æ—Å–ª–µ –∏–º–ø–æ—Ä—Ç–∞ VPN –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω

–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –Ω–∞—à—É –ø–æ–¥–¥–µ—Ä–∂–∫—É.
          `;
          break;
          
        case 'android':
          helpText = `
üì± *–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ —É—Å—Ç–∞–Ω–æ–≤–∫–µ VPN –Ω–∞ Android*

1. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ V2rayNG –∏–∑ Google Play:
   https://play.google.com/store/apps/details?id=com.v2ray.ang

2. –û—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ V2rayNG

3. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∑–Ω–∞—á–æ–∫ "+" –≤ –ø—Ä–∞–≤–æ–º –≤–µ—Ä—Ö–Ω–µ–º —É–≥–ª—É

4. –í—ã–±–µ—Ä–∏—Ç–µ "Import config file" –∏–ª–∏ "Scan QR code"

5. –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏, –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –æ—Ç –±–æ—Ç–∞, –∏–ª–∏ –æ—Ç—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ QR-–∫–æ–¥

6. –ü–æ—Å–ª–µ –∏–º–ø–æ—Ä—Ç–∞ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –≤—ã–∫–ª—é—á–∞—Ç–µ–ª—å –≤ –Ω–∏–∂–Ω–µ–π —á–∞—Å—Ç–∏ —ç–∫—Ä–∞–Ω–∞ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è

–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –Ω–∞—à—É –ø–æ–¥–¥–µ—Ä–∂–∫—É.
          `;
          break;
          
        case 'ios':
          helpText = `
üì± *–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ —É—Å—Ç–∞–Ω–æ–≤–∫–µ VPN –Ω–∞ iOS*

1. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Shadowrocket –∏–∑ App Store:
   https://apps.apple.com/app/shadowrocket/id932747118

2. –û—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Shadowrocket

3. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "+" –≤ –ø—Ä–∞–≤–æ–º –≤–µ—Ä—Ö–Ω–µ–º —É–≥–ª—É

4. –í—ã–±–µ—Ä–∏—Ç–µ "Type" -> "Vmess"

5. –í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏, –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ –æ—Ç –±–æ—Ç–∞, –∏–ª–∏ –æ—Ç—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ QR-–∫–æ–¥

6. –ù–∞–∂–º–∏—Ç–µ "Done" –∏ –≤–∫–ª—é—á–∏—Ç–µ –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è

–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –Ω–∞—à—É –ø–æ–¥–¥–µ—Ä–∂–∫—É.
          `;
          break;
          
        case 'commands':
          helpText = `
üìã *–í—Å–µ –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞*

/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
/help - –ü–æ–ª—É—á–∏—Ç—å —Å–ø—Ä–∞–≤–∫—É –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
/subscription - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏
/buy - –ü—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –ø–æ–¥–ø–∏—Å–∫—É
/profile - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—à–µ–º –ø—Ä–æ—Ñ–∏–ª–µ
/referral - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º–æ–π
/support - –°–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç–∏ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –±–æ—Ç–æ–º.
          `;
          break;
          
        default:
          helpText = `–í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Ä–æ–±–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π.`;
      }
      
      const keyboard = {
        reply_markup: {
          inline_keyboard: [
            [
              { text: 'üîô –ö —Å–ø–∏—Å–∫—É –ø–ª–∞—Ç—Ñ–æ—Ä–º', callback_data: 'help' }
            ]
          ]
        },
        parse_mode: 'Markdown' as TelegramBot.ParseMode
      };
      
      await bot.editMessageText(helpText, {
        chat_id: chatId,
        message_id: messageId,
        ...keyboard
      });
    } else if (callbackData.startsWith('manage_sub_')) {
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–æ–π
      const subscriptionId = parseInt(callbackData.replace('manage_sub_', ''), 10);
      
      // –ù–∞—Ö–æ–¥–∏–º –ø–æ–¥–ø–∏—Å–∫—É
      const subscription = await prisma.subscription.findUnique({
        where: { id: subscriptionId },
        include: {
          user: true,
          vpnServer: true
        }
      });
      
      if (!subscription) {
        bot.sendMessage(chatId, '‚ùå –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.');
        return;
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–¥–ø–∏—Å–∫–∞ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
      if (subscription.user.telegramId !== BigInt(query.from?.id || 0)) {
        bot.sendMessage(chatId, '‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –ø–æ–¥–ø–∏—Å–∫–µ.');
        return;
      }
      
      const managementMessage = `
üîß *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–æ–π #${subscription.id}*

–°–µ—Ä–≤–µ—Ä: ${subscription.vpnServer.name}
–î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: ${new Date(subscription.endDate).toLocaleDateString()}
–ê–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ: ${subscription.autoRenewal ? '–í–∫–ª—é—á–µ–Ω–æ ‚úÖ' : '–û—Ç–∫–ª—é—á–µ–Ω–æ ‚ùå'}

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:
      `;
      
      const keyboard = {
        reply_markup: {
          inline_keyboard: [
            [
              { 
                text: subscription.autoRenewal ? '–û—Ç–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ' : '–í–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ', 
                callback_data: `auto_renewal_${subscription.id}_${!subscription.autoRenewal}` 
              }
            ],
            [
              { text: 'üì• –ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é', callback_data: `get_config_${subscription.id}` }
            ],
            [
              { text: 'üîô –ù–∞–∑–∞–¥ –∫ –ø–æ–¥–ø–∏—Å–∫–∞–º', callback_data: 'subscription' }
            ]
          ]
        },
        parse_mode: 'Markdown' as TelegramBot.ParseMode
      };
      
      await bot.editMessageText(managementMessage, {
        chat_id: chatId,
        message_id: messageId,
        ...keyboard
      });
    } else if (callbackData.startsWith('show_sub_')) {
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–¥–ø–∏—Å–∫–µ
      const subscriptionId = parseInt(callbackData.replace('show_sub_', ''), 10);
      
      // –ù–∞—Ö–æ–¥–∏–º –ø–æ–¥–ø–∏—Å–∫—É
      const subscription = await prisma.subscription.findUnique({
        where: { id: subscriptionId },
        include: {
          user: true,
          vpnServer: true
        }
      });
      
      if (!subscription) {
        bot.sendMessage(chatId, '‚ùå –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.');
        return;
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–¥–ø–∏—Å–∫–∞ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
      if (subscription.user.telegramId !== BigInt(query.from?.id || 0)) {
        bot.sendMessage(chatId, '‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –ø–æ–¥–ø–∏—Å–∫–µ.');
        return;
      }
      
      // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–¥–ø–∏—Å–∫–µ
      const endDate = new Date(subscription.endDate);
      const formattedDate = `${endDate.getDate()}.${endDate.getMonth() + 1}.${endDate.getFullYear()}`;
      
      let subscriptionMessage = 'üîë *–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–¥–ø–∏—Å–∫–µ:*\n\n';
      
      subscriptionMessage += `üåê *–ü–æ–¥–ø–∏—Å–∫–∞ #${subscription.id}*\n`;
      subscriptionMessage += `üìç –°–µ—Ä–≤–µ—Ä: ${subscription.vpnServer.name} (${subscription.vpnServer.location})\n`;
      subscriptionMessage += `‚è± –î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: ${formattedDate}\n`;
      subscriptionMessage += `‚¨áÔ∏è –°–∫–æ—Ä–æ—Å—Ç—å —Å–∫–∞—á–∏–≤–∞–Ω–∏—è: ${subscription.downloadSpeed} Mbps\n`;
      subscriptionMessage += `‚¨ÜÔ∏è –°–∫–æ—Ä–æ—Å—Ç—å –∑–∞–≥—Ä—É–∑–∫–∏: ${subscription.uploadSpeed} Mbps\n`;
      subscriptionMessage += `üîÑ –ê–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ: ${subscription.autoRenewal ? '–í–∫–ª—é—á–µ–Ω–æ' : '–û—Ç–∫–ª—é—á–µ–Ω–æ'}\n`;
      subscriptionMessage += `üìÇ –¢–æ—Ä—Ä–µ–Ω—Ç—ã: ${subscription.torrentsAllowed ? '–†–∞–∑—Ä–µ—à–µ–Ω—ã' : '–ó–∞–ø—Ä–µ—â–µ–Ω—ã'}\n`;
      
      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–Ω–æ–ø–æ–∫ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
      const allSubscriptions = await prisma.subscription.findMany({
        where: {
          userId: subscription.userId,
          status: 'ACTIVE',
          endDate: {
            gt: new Date()
          }
        },
        orderBy: {
          id: 'asc'
        }
      });
      
      // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
      const keyboard = {
        reply_markup: {
          inline_keyboard: [
            [
              { text: 'üì• –ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é', callback_data: `get_config_${subscription.id}` },
              { text: 'üîÑ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ', callback_data: `manage_sub_${subscription.id}` }
            ],
            [
              { text: 'üí≥ –ö—É–ø–∏—Ç—å –µ—â–µ', callback_data: 'buy' },
              { text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'subscription' }
            ]
          ]
        },
        parse_mode: 'Markdown' as TelegramBot.ParseMode
      };
      
      // –ï—Å–ª–∏ –ø–æ–¥–ø–∏—Å–æ–∫ –±–æ–ª—å—à–µ –æ–¥–Ω–æ–π, –¥–æ–±–∞–≤–ª—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –º–µ–∂–¥—É –Ω–∏–º–∏
      if (allSubscriptions.length > 1) {
        const navigationButtons = allSubscriptions.map((sub, index) => ({
          text: subscription.id === sub.id ? `‚Ä¢${index + 1}‚Ä¢` : `${index + 1}`,
          callback_data: `show_sub_${sub.id}`
        }));
        
        keyboard.reply_markup.inline_keyboard.splice(
          1, 0, navigationButtons
        );
      }
      
      await bot.editMessageText(subscriptionMessage, {
        chat_id: chatId,
        message_id: messageId,
        ...keyboard
      });
    } else if (callbackData.startsWith('auto_renewal_')) {
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏—è
      const parts = callbackData.split('_');
      const subscriptionId = parseInt(parts[2], 10);
      const newStatus = parts[3] === 'true';
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏—è
      await prisma.subscription.update({
        where: { id: subscriptionId },
        data: { autoRenewal: newStatus }
      });
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
      const statusMessage = newStatus
        ? '‚úÖ –ê–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –≤–∫–ª—é—á–µ–Ω–æ'
        : '‚ùå –ê–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–æ';
      
      await bot.answerCallbackQuery(query.id, {
        text: statusMessage,
        show_alert: true
      });
      
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –ø–æ–¥–ø–∏—Å–∫–æ–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
      const callbackQuery = {
        ...query,
        data: `manage_sub_${subscriptionId}`
      };
      
      await handleCallbackQuery(bot)(callbackQuery);
    } else if (callbackData === 'payment_history') {
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä –∏—Å—Ç–æ—Ä–∏–∏ –ø–ª–∞—Ç–µ–∂–µ–π
      const user = await prisma.user.findUnique({
        where: { telegramId: BigInt(query.from?.id || 0) }
      });
      
      if (!user) {
        bot.sendMessage(chatId, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º.');
        return;
      }
      
      // –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø–ª–∞—Ç–µ–∂–µ–π
      const payments = await prisma.payment.findMany({
        where: { userId: user.id },
        orderBy: { createdAt: 'desc' },
        take: 10
      });
      
      if (payments.length === 0) {
        const noPaymentsMessage = `
üí≥ *–ò—Å—Ç–æ—Ä–∏—è –ø–ª–∞—Ç–µ–∂–µ–π*

–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø–ª–∞—Ç–µ–∂–µ–π.
        `;
        
        const keyboard = {
          reply_markup: {
            inline_keyboard: [
              [{ text: 'üí≥ –ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É', callback_data: 'buy' }],
              [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'profile' }]
            ]
          },
          parse_mode: 'Markdown' as TelegramBot.ParseMode
        };
        
        await bot.editMessageText(noPaymentsMessage, {
          chat_id: chatId,
          message_id: messageId,
          ...keyboard
        });
        return;
      }
      
      // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏—Å—Ç–æ—Ä–∏–µ–π –ø–ª–∞—Ç–µ–∂–µ–π
      let paymentHistoryMessage = `
üí≥ *–ò—Å—Ç–æ—Ä–∏—è –ø–ª–∞—Ç–µ–∂–µ–π*

`;
      
      for (const payment of payments) {
        const date = new Date(payment.createdAt).toLocaleDateString();
        const time = new Date(payment.createdAt).toLocaleTimeString();
        const status = payment.status === 'SUCCEEDED' 
          ? '‚úÖ –û–ø–ª–∞—á–µ–Ω' 
          : payment.status === 'PENDING' 
            ? '‚è≥ –í –æ–±—Ä–∞–±–æ—Ç–∫–µ' 
            : '‚ùå –û—Ç–º–µ–Ω–µ–Ω';
        
        paymentHistoryMessage += `${date} ${time} - ${payment.amount} ${payment.currency} ${status}\n`;
      }
      
      const keyboard = {
        reply_markup: {
          inline_keyboard: [
            [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'profile' }]
          ]
        },
        parse_mode: 'Markdown' as TelegramBot.ParseMode
      };
      
      await bot.editMessageText(paymentHistoryMessage, {
        chat_id: chatId,
        message_id: messageId,
        ...keyboard
      });
    } else if (callbackData === 'settings') {
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const user = await prisma.user.findUnique({
        where: { telegramId: BigInt(query.from?.id || 0) }
      });
      
      if (!user) {
        bot.sendMessage(chatId, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º.');
        return;
      }
      
      const settingsMessage = `
‚öôÔ∏è *–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è*

–Ø–∑—ã–∫: ${user.language === 'ru' ? '–†—É—Å—Å–∫–∏–π üá∑üá∫' : 'English üá¨üáß'}

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:
      `;
      
      const keyboard = {
        reply_markup: {
          inline_keyboard: [
            [{ 
              text: user.language === 'ru' ? '–°–º–µ–Ω–∏—Ç—å –Ω–∞ English üá¨üáß' : 'Change to –†—É—Å—Å–∫–∏–π üá∑üá∫', 
              callback_data: `change_language_${user.language === 'ru' ? 'en' : 'ru'}` 
            }],
            [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'profile' }]
          ]
        },
        parse_mode: 'Markdown' as TelegramBot.ParseMode
      };
      
      await bot.editMessageText(settingsMessage, {
        chat_id: chatId,
        message_id: messageId,
        ...keyboard
      });
    } else if (callbackData.startsWith('change_language_')) {
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —è–∑—ã–∫–∞
      const newLanguage = callbackData.replace('change_language_', '');
      
      // –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const user = await prisma.user.findUnique({
        where: { telegramId: BigInt(query.from?.id || 0) }
      });
      
      if (!user) {
        bot.sendMessage(chatId, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º.');
        return;
      }
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      await prisma.user.update({
        where: { id: user.id },
        data: { language: newLanguage }
      });
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
      const successMessage = newLanguage === 'ru' 
        ? '‚úÖ –Ø–∑—ã–∫ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ –†—É—Å—Å–∫–∏–π'
        : '‚úÖ Language successfully changed to English';
      
      await bot.answerCallbackQuery(query.id, {
        text: successMessage,
        show_alert: true
      });
      
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
      const callbackQuery = {
        ...query,
        data: 'settings'
      };
      
      await handleCallbackQuery(bot)(callbackQuery);
    } else if (callbackData.startsWith('enable_auto_renewal_')) {
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∫–ª—é—á–µ–Ω–∏—è –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏—è
      const subscriptionId = parseInt(callbackData.replace('enable_auto_renewal_', ''), 10);
      await handleEnableAutoRenewal(bot, chatId, messageId, subscriptionId);
    } else if (callbackData.startsWith('disable_auto_renewal_')) {
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏—è
      const subscriptionId = parseInt(callbackData.replace('disable_auto_renewal_', ''), 10);
      await handleDisableAutoRenewal(bot, chatId, messageId, subscriptionId);
    } else if (callbackData.startsWith('renew_subscription_')) {
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–¥–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏
      const subscriptionId = parseInt(callbackData.replace('renew_subscription_', ''), 10);
      await handleRenewSubscription(bot, chatId, messageId, subscriptionId);
    }
    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É –¥—Ä—É–≥–∏—Ö callback_data
    
  } catch (error) {
    logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ callback query: ${error}`);
    if (query.message?.chat.id) {
      bot.sendMessage(query.message.chat.id, 'üòû –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  }
};

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏
 */
async function handleEnableAutoRenewal(
  bot: TelegramBot, 
  chatId: number, 
  messageId: number, 
  subscriptionId: number
): Promise<void> {
  try {
    // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ Telegram ID
    const user = await prisma.user.findFirst({
      where: { telegramId: BigInt(chatId) }
    });

    if (!user) {
      await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.');
      return;
    }

    // –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ–Ω–∞ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    const subscription = await prisma.subscription.findFirst({
      where: {
        id: subscriptionId,
        userId: user.id
      },
      include: {
        vpnServer: true
      }
    });

    if (!subscription) {
      await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞: –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –≤–∞–º.');
      return;
    }

    // –í–∫–ª—é—á–∞–µ–º –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ
    const result = await subscriptionService.enableAutoRenewal(subscriptionId);

    if (result.success) {
      await bot.editMessageText(
        '‚úÖ *–ê–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ –≤–∫–ª—é—á–µ–Ω–æ*\n\n'
        + '–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–¥–ª–µ–Ω–∞ –ø—Ä–∏ –∏—Å—Ç–µ—á–µ–Ω–∏–∏ —Å—Ä–æ–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è.\n'
        + '–í—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç–µ –æ—Ç–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ –≤ —Ä–∞–∑–¥–µ–ª–µ "–ú–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏".',
        {
          chat_id: chatId,
          message_id: messageId,
          parse_mode: 'Markdown',
          reply_markup: {
            inline_keyboard: [
              [{ text: '–û—Ç–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ', callback_data: `disable_auto_renewal_${subscriptionId}` }],
              [{ text: '–ù–∞–∑–∞–¥ –∫ –ø–æ–¥–ø–∏—Å–∫–∞–º', callback_data: 'my_subscriptions' }]
            ]
          }
        }
      );
    } else {
      await bot.sendMessage(chatId, `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–∫–ª—é—á–µ–Ω–∏–∏ –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏—è: ${result.error}`);
    }
  } catch (error: any) {
    logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–∫–ª—é—á–µ–Ω–∏–∏ –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏—è: ${error instanceof Error ? error.message : String(error)}`);
    await bot.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
}

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏
 */
async function handleDisableAutoRenewal(
  bot: TelegramBot, 
  chatId: number, 
  messageId: number, 
  subscriptionId: number
): Promise<void> {
  try {
    // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ Telegram ID
    const user = await prisma.user.findFirst({
      where: { telegramId: BigInt(chatId) }
    });

    if (!user) {
      await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.');
      return;
    }

    // –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ–Ω–∞ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    const subscription = await prisma.subscription.findFirst({
      where: {
        id: subscriptionId,
        userId: user.id
      },
      include: {
        vpnServer: true
      }
    });

    if (!subscription) {
      await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞: –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –≤–∞–º.');
      return;
    }

    // –û—Ç–∫–ª—é—á–∞–µ–º –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ
    const result = await subscriptionService.disableAutoRenewal(subscriptionId);

    if (result.success) {
      await bot.editMessageText(
        '‚úÖ *–ê–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ*\n\n'
        + '–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–¥–ª–µ–Ω–∞ –ø—Ä–∏ –∏—Å—Ç–µ—á–µ–Ω–∏–∏ —Å—Ä–æ–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è.\n'
        + '–í—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç–µ –≤–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ –≤ —Ä–∞–∑–¥–µ–ª–µ "–ú–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏".',
        {
          chat_id: chatId,
          message_id: messageId,
          parse_mode: 'Markdown',
          reply_markup: {
            inline_keyboard: [
              [{ text: '–í–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ', callback_data: `enable_auto_renewal_${subscriptionId}` }],
              [{ text: '–ù–∞–∑–∞–¥ –∫ –ø–æ–¥–ø–∏—Å–∫–∞–º', callback_data: 'my_subscriptions' }]
            ]
          }
        }
      );
    } else {
      await bot.sendMessage(chatId, `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏—è: ${result.error}`);
    }
  } catch (error: any) {
    logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏—è: ${error instanceof Error ? error.message : String(error)}`);
    await bot.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
}

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏
 */
async function handleRenewSubscription(
  bot: TelegramBot, 
  chatId: number, 
  messageId: number,
  subscriptionId: number
): Promise<void> {
  try {
    // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ Telegram ID
    const user = await prisma.user.findFirst({
      where: { telegramId: BigInt(chatId) }
    });

    if (!user) {
      await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.');
      return;
    }

    // –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ–Ω–∞ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    const subscription = await prisma.subscription.findFirst({
      where: {
        id: subscriptionId,
        userId: user.id
      },
      include: {
        vpnServer: true
      }
    });

    if (!subscription) {
      await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞: –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –≤–∞–º.');
      return;
    }

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Ç–∞—Ä–∏—Ñ–∞ –¥–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è
    await bot.editMessageText(
      `üîÑ *–ü—Ä–æ–¥–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏*\n\n`
      + `–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ –¥–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è –≤–∞—à–µ–π –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ ${subscription.vpnServer.name}:`,
      {
        chat_id: chatId,
        message_id: messageId,
        parse_mode: 'Markdown',
        reply_markup: {
          inline_keyboard: [
            [{ text: '1 –º–µ—Å—è—Ü - 300‚ÇΩ', callback_data: `buy_renewal_monthly_${subscriptionId}` }],
            [{ text: '3 –º–µ—Å—è—Ü–∞ - 800‚ÇΩ', callback_data: `buy_renewal_quarterly_${subscriptionId}` }],
            [{ text: '12 –º–µ—Å—è—Ü–µ–≤ - 2900‚ÇΩ', callback_data: `buy_renewal_annual_${subscriptionId}` }],
            [{ text: '–ù–∞–∑–∞–¥ –∫ –ø–æ–¥–ø–∏—Å–∫–∞–º', callback_data: 'my_subscriptions' }]
          ]
        }
      }
    );
  } catch (error: any) {
    logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –ø—Ä–æ–¥–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏: ${error instanceof Error ? error.message : String(error)}`);
    await bot.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
} 