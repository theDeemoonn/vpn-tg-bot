import TelegramBot from 'node-telegram-bot-api';
import YooKassa from 'yookassa';
import { User, PaymentStatus } from '@prisma/client';
import { prisma } from './database';
import config from '../config';
import { logger } from '../utils/logger';
import { SubscriptionPeriod, getPaymentAmount, getSubscriptionDuration } from './payment';
import axios from 'axios';

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ÆKassa —Å –¥–∞–Ω–Ω—ã–º–∏ –º–∞–≥–∞–∑–∏–Ω–∞
const yooKassa = new YooKassa({
  shopId: config.yookassaShopId,
  secretKey: config.yookassaSecretKey
});

/**
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –ø–æ–¥–ø–∏—Å–∫–∏
 */
export async function handleNewSubscription(
    userId: number,
    period: SubscriptionPeriod
): Promise<void> {
  try {
    // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–π —Å–µ—Ä–≤–∏—Å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏
    const vpnService = require('../services/vpn');

    // –í—ã–±–∏—Ä–∞–µ–º –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–µ—Ä –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const server = await vpnService.selectOptimalServer();

    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –ø–æ–¥–ø–∏—Å–∫—É —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é
    const durationInDays = getSubscriptionDuration(period);
    const startDate = new Date();
    const endDate = new Date(startDate);
    endDate.setDate(endDate.getDate() + durationInDays);

    // –°–æ–∑–¥–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É
    const subscription = await prisma.subscription.create({
      data: {
        userId,
        vpnServerId: server.id,
        status: 'ACTIVE',
        startDate,
        endDate,
        autoRenewal: false, // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ –≤—ã–∫–ª—é—á–µ–Ω–æ
        downloadSpeed: config.defaultDownloadSpeed,
        uploadSpeed: config.defaultUploadSpeed,
        torrentsAllowed: config.torrentAllowed
      }
    });

    logger.info(`–°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ ${subscription.id} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º VPN –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await vpnService.generateClientConfig(subscription);

    // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
    await prisma.vpnServer.update({
      where: { id: server.id },
      data: {
        currentClients: {
          increment: 1
        }
      }
    });

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    try {
      const bot = require('../bot').default;
      const user = await prisma.user.findUnique({ where: { id: userId } });

      if (bot && user) {
        await bot.sendMessage(
            user.telegramId.toString(),
            `‚úÖ –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –¥–æ ${endDate.toLocaleDateString()}.\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /subscription –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π –∏ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ VPN.`
        );
      }
    } catch (notifyError: any) {
      const errorMessage = notifyError instanceof Error ? notifyError.message : String(notifyError);
      logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤–æ–π –ø–æ–¥–ø–∏—Å–∫–µ: ${errorMessage}`);
      // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, –Ω–µ—Å–º–æ—Ç—Ä—è –Ω–∞ –æ—à–∏–±–∫—É –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    }
  } catch (error: any) {
    const errorMessage = error instanceof Error ? error.message : String(error);
    logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–æ–≤–æ–π –ø–æ–¥–ø–∏—Å–∫–∏: ${errorMessage}`);
    throw error;
  }
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–µ—Ä–∏–æ–¥–∞ –ø–æ–¥–ø–∏—Å–∫–∏
 */
function getPeriodName(period: SubscriptionPeriod): string {
  switch (period) {
    case SubscriptionPeriod.MONTHLY:
      return '–ú–µ—Å—è—á–Ω–∞—è';
    case SubscriptionPeriod.QUARTERLY:
      return '–ö–≤–∞—Ä—Ç–∞–ª—å–Ω–∞—è';
    case SubscriptionPeriod.ANNUAL:
      return '–ì–æ–¥–æ–≤–∞—è';
    default:
      return '–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è';
  }
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏
 */
function getSubscriptionDescription(period: SubscriptionPeriod): string {
  switch (period) {
    case SubscriptionPeriod.MONTHLY:
      return '–ú–µ—Å—è—á–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ VPN —Å–µ—Ä–≤–∏—Å';
    case SubscriptionPeriod.QUARTERLY:
      return '–ö–≤–∞—Ä—Ç–∞–ª—å–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ VPN —Å–µ—Ä–≤–∏—Å (3 –º–µ—Å—è—Ü–∞)';
    case SubscriptionPeriod.ANNUAL:
      return '–ì–æ–¥–æ–≤–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ VPN —Å–µ—Ä–≤–∏—Å (12 –º–µ—Å—è—Ü–µ–≤)';
    default:
      return '–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ VPN —Å–µ—Ä–≤–∏—Å';
  }
}

/**
 * –ü—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã, –µ—Å–ª–∏ –ø–ª–∞—Ç–µ–∂ —á–µ—Ä–µ–∑ Telegram –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
 */
async function offerAlternativePayment(
    bot: TelegramBot,
    chatId: number,
    user: User,
    period: SubscriptionPeriod,
    options?: {
      subscriptionId?: number;
      isGift?: boolean;
      giftSubscriptionId?: number;
      recipientId?: number;
    },
    paymentId?: string
): Promise<void> {
  try {
    // –£–¥–∞–ª—è–µ–º —É—Å—Ç–∞—Ä–µ–≤—à–∏–π –ø–ª–∞—Ç–µ–∂, –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if (paymentId) {
      await prisma.payment.delete({
        where: { id: paymentId }
      }).catch(e => {
        logger.warn(`–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø–ª–∞—Ç–µ–∂ ${paymentId}: ${e}`);
      });
    }

    // –°–æ–∑–¥–∞–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await bot.sendMessage(
        chatId,
        `‚ùå *–û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ Telegram –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞*\n\n–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –æ–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ Telegram –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ–ø–ª–∞—Ç—É –±–∞–Ω–∫–æ–≤—Å–∫–æ–π –∫–∞—Ä—Ç–æ–π.`,
        {
          parse_mode: 'Markdown',
          reply_markup: {
            inline_keyboard: [
              [{ text: 'üí≥ –û–ø–ª–∞—Ç–∏—Ç—å –∫–∞—Ä—Ç–æ–π', callback_data: `pay_card_${period}${options?.subscriptionId ? '_' + options.subscriptionId : ''}` }],
              [{ text: 'üîô –ù–∞–∑–∞–¥ –∫ —Ç–∞—Ä–∏—Ñ–∞–º', callback_data: 'buy' }]
            ]
          }
        }
    );
  } catch (error) {
    logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–∏ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–≥–æ —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã: ${error}`);
  }
}

export async function createYookassaTelegramPayment(
    bot: TelegramBot,
    chatId: number,
    user: User,
    period: SubscriptionPeriod,
    options?: {
      subscriptionId?: number;
      isGift?: boolean;
      giftSubscriptionId?: number;
      recipientId?: number;
    }
): Promise<{ success: boolean; error?: string }> {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–æ–∫–µ–Ω–∞ –¥–ª—è –ÆKassa Payments –≤ Telegram
    if (!config.telegramPaymentToken || config.telegramPaymentToken.trim() === '') {
      throw new Error('–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ç–æ–∫–µ–Ω –¥–ª—è –ÆKassa Payments –≤ Telegram');
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞ –º–µ–Ω–µ–µ —Å—Ç—Ä–æ–≥–∞—è - –æ–Ω –º–æ–∂–µ—Ç –∏–º–µ—Ç—å —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã
    // –¢–æ–∫–µ–Ω –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—Ä–æ—Å—Ç–æ –Ω–µ–ø—É—Å—Ç–æ–π —Å—Ç—Ä–æ–∫–æ–π
    const token = config.telegramPaymentToken.trim();
    logger.debug(`–ò—Å–ø–æ–ª—å–∑—É–µ–º—ã–π —Ç–æ–∫–µ–Ω –¥–ª—è –ø–ª–∞—Ç–µ–∂–µ–π: ${token.substring(0, 4)}...${token.substring(token.length - 4)}`);

    // –ü–æ–ª—É—á–∞–µ–º —Å—É–º–º—É –∏ –æ–ø–∏—Å–∞–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏
    const amount = getPaymentAmount(period);
    const isGift = options?.isGift || false;
    const title = isGift
        ? `–ü–æ–¥–∞—Ä–æ—á–Ω–∞—è VPN –ø–æ–¥–ø–∏—Å–∫–∞ - ${getPeriodName(period)}`
        : `VPN –ø–æ–¥–ø–∏—Å–∫–∞ - ${getPeriodName(period)}`;

    let description = getSubscriptionDescription(period);
    if (isGift) {
      description = `–ü–æ–¥–∞—Ä–æ—á–Ω–∞—è ${description.toLowerCase()}`;
    }

    // –°–æ–∑–¥–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∞
    const metadata: any = {
      userId: user.id.toString(),
      telegramId: user.telegramId.toString(),
      subscriptionPeriod: period
    };

    // –î–æ–±–∞–≤–ª—è–µ–º ID –ø–æ–¥–ø–∏—Å–∫–∏, –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω
    if (options?.subscriptionId) {
      metadata.subscriptionId = options.subscriptionId.toString();
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–∞—Ä–∫–µ, –µ—Å–ª–∏ —ç—Ç–æ –ø–æ–¥–∞—Ä–æ—á–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞
    if (isGift) {
      metadata.isGift = 'true';
      if (options?.recipientId) {
        metadata.recipientId = options.recipientId.toString();
      }
      if (options?.giftSubscriptionId) {
        metadata.giftSubscriptionId = options.giftSubscriptionId.toString();
      }
    }

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π payload –¥–ª—è –ø–ª–∞—Ç–µ–∂–∞
    const payload = JSON.stringify(metadata);

    // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –ø–ª–∞—Ç–µ–∂–µ –≤ –ë–î
    const paymentId = `tg_${Date.now()}_${user.id}`;
    await prisma.payment.create({
      data: {
        id: paymentId,
        userId: user.id,
        subscriptionId: options?.subscriptionId,
        amount: amount,
        currency: 'RUB',
        status: PaymentStatus.PENDING,
        description: description,
        paymentMethod: 'YOOKASSA_TELEGRAM',
        expiresAt: new Date(Date.now() + 24 * 60 * 60 * 1000) // –ü–ª–∞—Ç–µ–∂ –∞–∫—Ç–∏–≤–µ–Ω 24 —á–∞—Å–∞
      }
    });

    // –ï—Å–ª–∏ —ç—Ç–æ –ø–æ–¥–∞—Ä–æ—á–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞, –æ–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –æ –Ω–µ–π
    if (isGift && options?.giftSubscriptionId) {
      await prisma.giftSubscription.update({
        where: { id: options.giftSubscriptionId },
        data: {
          paymentId
        }
      });
    }

    // –§–æ—Ä–º–∏—Ä—É–µ–º –º–∞—Å—Å–∏–≤ —Ü–µ–Ω —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ —Ç–∏–ø–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö
    const prices = [
      {
        label: title,
        amount: Math.round(amount * 100) // –í –∫–æ–ø–µ–π–∫–∞—Ö –¥–ª—è Telegram API
      }
    ];

    // –ü–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ –±–æ—Ç –ø–µ—á–∞—Ç–∞–µ—Ç
    await bot.sendChatAction(chatId, 'typing');

    logger.info(`–°–æ–∑–¥–∞—é –ø–ª–∞—Ç–µ–∂–Ω—ã–π —Å—á–µ—Ç —á–µ—Ä–µ–∑ sendInvoice –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${user.id}, telegramId: ${user.telegramId}, –ø–µ—Ä–∏–æ–¥: ${period}`);

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–ª–∞—Ç–µ–∂–Ω—ã–π –∏–Ω–≤–æ–π—Å —á–µ—Ä–µ–∑ Telegram API
    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ https://core.telegram.org/bots/api#sendinvoice
    const invoiceOptions: TelegramBot.SendInvoiceOptions = {
      need_name: false,
      need_phone_number: false,
      need_email: false,
      need_shipping_address: false,
      is_flexible: false,
      disable_notification: false,
      protect_content: false,
      start_parameter: `vpn_payment_${period}`,
      photo_url: 'https://i.imgur.com/YRBvM9x.png', // –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –∏–Ω–≤–æ–π—Å–∞
      photo_width: 600,
      photo_height: 300
    };

    try {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ç–æ–¥ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—á–µ—Ç–∞ –Ω–∞–ø—Ä—è–º—É—é —á–µ—Ä–µ–∑ Telegram Bot API
      const apiUrl = `https://api.telegram.org/bot${config.telegramBotToken}/sendInvoice`;

      // –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ https://core.telegram.org/bots/api#sendinvoice
      const invoiceData = {
        chat_id: chatId,
        title: title,
        description: description,
        payload: payload,
        provider_token: token,
        currency: 'RUB',
        prices: prices,
        start_parameter: invoiceOptions.start_parameter,
        photo_url: invoiceOptions.photo_url,
        photo_width: invoiceOptions.photo_width,
        photo_height: invoiceOptions.photo_height,
        need_name: invoiceOptions.need_name || false,
        need_phone_number: invoiceOptions.need_phone_number || false,
        need_email: invoiceOptions.need_email || false,
        need_shipping_address: invoiceOptions.need_shipping_address || false,
        is_flexible: invoiceOptions.is_flexible || false,
        disable_notification: invoiceOptions.disable_notification || false,
        protect_content: invoiceOptions.protect_content || false
      };

      // –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ (–±–µ–∑ sensitive data)
      const debugData = {
        ...invoiceData,
        provider_token: '***HIDDEN***',
        payload: '***HIDDEN***'
      };
      logger.debug(`–û—Ç–ø—Ä–∞–≤–∫–∞ API –∑–∞–ø—Ä–æ—Å–∞ sendInvoice: ${JSON.stringify(debugData)}`);

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞–ø—Ä—è–º—É—é —á–µ—Ä–µ–∑ API
      try {
        const response = await axios.post(apiUrl, invoiceData);

        if (response.data && response.data.ok) {
          logger.info(`–ü–ª–∞—Ç–µ–∂–Ω—ã–π —Å—á–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —á–µ—Ä–µ–∑ Telegram API –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${user.telegramId}`);

          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
          setTimeout(async () => {
            try {
              await bot.sendMessage(
                  chatId,
                  `‚ÑπÔ∏è *–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ–ø–ª–∞—Ç–µ*\n\n–î–ª—è —Å–æ–≤–µ—Ä—à–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –æ–ø–ª–∞—Ç—ã –≤—ã—à–µ ‚¨ÜÔ∏è\n\n–ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã –≤–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –±—É–¥–µ—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.\n\nID –ø–ª–∞—Ç–µ–∂–∞: \`${paymentId}\``,
                  {
                    parse_mode: 'Markdown',
                    reply_markup: {
                      inline_keyboard: [
                        [{ text: 'üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞', callback_data: `check_payment_${paymentId}` }]
                      ]
                    }
                  }
              );
            } catch (error) {
              logger.error(`–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: ${error}`);
            }
          }, 1500);

          return { success: true };
        } else {
          // –ï—Å–ª–∏ API –∑–∞–ø—Ä–æ—Å –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É –≤ –æ—Ç–≤–µ—Ç–µ
          logger.error(`–û—à–∏–±–∫–∞ –≤ –æ—Ç–≤–µ—Ç–µ API: ${JSON.stringify(response.data)}`);

          // –ü—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥ —á–µ—Ä–µ–∑ node-telegram-bot-api
          logger.info(`–ü—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–Ω–≤–æ–π—Å–∞ —á–µ—Ä–µ–∑ node-telegram-bot-api`);
          const sentInvoice = await bot.sendInvoice(
              chatId,
              title,
              description,
              payload,
              token,
              'RUB',
              prices,
              invoiceOptions
          );

          logger.info(`–ü–ª–∞—Ç–µ–∂–Ω—ã–π —Å—á–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —á–µ—Ä–µ–∑ node-telegram-bot-api –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${user.telegramId}, message_id: ${sentInvoice.message_id}`);

          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
          setTimeout(async () => {
            try {
              await bot.sendMessage(
                  chatId,
                  `‚ÑπÔ∏è *–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ–ø–ª–∞—Ç–µ*\n\n–î–ª—è —Å–æ–≤–µ—Ä—à–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –æ–ø–ª–∞—Ç—ã –≤—ã—à–µ ‚¨ÜÔ∏è\n\n–ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã –≤–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –±—É–¥–µ—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.\n\nID –ø–ª–∞—Ç–µ–∂–∞: \`${paymentId}\``,
                  {
                    parse_mode: 'Markdown',
                    reply_markup: {
                      inline_keyboard: [
                        [{ text: 'üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞', callback_data: `check_payment_${paymentId}` }]
                      ]
                    }
                  }
              );
            } catch (error) {
              logger.error(`–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: ${error}`);
            }
          }, 1500);

          return { success: true };
        }
      } catch (apiError: any) {
        // –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –æ—à–∏–±–∫–∏ API –∑–∞–ø—Ä–æ—Å–∞
        if (apiError.response) {
          // –°–µ—Ä–≤–µ—Ä –æ—Ç–≤–µ—Ç–∏–ª —Å –∫–æ–¥–æ–º —Å—Ç–∞—Ç—É—Å–∞ –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ 2xx
          logger.error(`–û—à–∏–±–∫–∞ API –∑–∞–ø—Ä–æ—Å–∞ (${apiError.response.status}): ${JSON.stringify(apiError.response.data)}`);

          // –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ —Å–≤—è–∑–∞–Ω–∞ —Å –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–º –ø–ª–∞—Ç–µ–∂–µ–π, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—É
          if (apiError.response.data &&
              apiError.response.data.description &&
              (apiError.response.data.description.includes('PAYMENT_PROVIDER_INVALID') ||
                  apiError.response.data.description.includes('provider_token'))) {

            logger.error('–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –æ—à–∏–±–∫–∞ —Å –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–º –ø–ª–∞—Ç–µ–∂–µ–π. –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç—ã.');

            // –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã
            await offerAlternativePayment(bot, chatId, user, period, options, paymentId);
            return { success: false, error: '–ü–ª–∞—Ç–µ–∂ —á–µ—Ä–µ–∑ Telegram –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∞ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞.' };
          }
        } else if (apiError.request) {
          // –ó–∞–ø—Ä–æ—Å –±—ã–ª —Å–¥–µ–ª–∞–Ω, –Ω–æ –Ω–µ –ø–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç
          logger.error('–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç Telegram API:', apiError.request);
        } else {
          // –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –∑–∞–ø—Ä–æ—Å–∞
          logger.error('–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–ø—Ä–æ—Å–∞:', apiError.message);
        }

        // –ü—Ä–æ–±—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –º–µ—Ç–æ–¥ node-telegram-bot-api
        throw apiError;
      }
    } catch (invoiceError: any) {
      logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ invoice: ${invoiceError}`);

      // –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ —Å–≤—è–∑–∞–Ω–∞ —Å –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–º –ø–ª–∞—Ç–µ–∂–µ–π, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥
      if (invoiceError.toString().includes('PAYMENT_PROVIDER_INVALID') ||
          invoiceError.toString().includes('provider_token')) {

        await offerAlternativePayment(bot, chatId, user, period, options, paymentId);
        return { success: false, error: '–ü–ª–∞—Ç–µ–∂ —á–µ—Ä–µ–∑ Telegram –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∞ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞.' };
      }

      // –î–ª—è –¥—Ä—É–≥–∏—Ö –æ—à–∏–±–æ–∫ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã —á–µ—Ä–µ–∑ –ÆKassa –Ω–∞–ø—Ä—è–º—É—é
      await offerAlternativePayment(bot, chatId, user, period, options, paymentId);
      return { success: false, error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–ª–∞—Ç–µ–∂–∞ —á–µ—Ä–µ–∑ Telegram. –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∞ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞.' };
    }
  } catch (error: any) {
    const errorMessage = error instanceof Error ? error.message : String(error);
    logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞ –ÆKassa —á–µ—Ä–µ–∑ Telegram: ${errorMessage}`);

    // –ü—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ–º –æ—à–∏–±–∫–∏
    try {
      await bot.sendMessage(
          chatId,
          `‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–ª–∞—Ç–µ–∂ —á–µ—Ä–µ–∑ Telegram: ${errorMessage}\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥—Ä—É–≥–æ–π —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã.`
      );
    } catch (msgError) {
      logger.error(`–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ: ${msgError}`);
    }

    return { success: false, error: errorMessage };
  }
}

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è answerPreCheckoutQuery - –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤—ã–∑–≤–∞–Ω –≤ —Ç–µ—á–µ–Ω–∏–µ 10 —Å–µ–∫—É–Ω–¥
 * –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è PreCheckoutQuery –æ—Ç Telegram
 *
 * @param bot –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ Telegram
 * @param preCheckoutQueryId ID –∑–∞–ø—Ä–æ—Å–∞ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
 * @param ok –†–∞–∑—Ä–µ—à–∏—Ç—å (true) –∏–ª–∏ –æ—Ç–∫–ª–æ–Ω–∏—Ç—å (false) –ø–ª–∞—Ç–µ–∂
 * @param errorMessage –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ ok=false)
 */
export async function answerPreCheckoutQuery(
    bot: TelegramBot,
    preCheckoutQueryId: string,
    ok: boolean,
    errorMessage?: string
): Promise<void> {
  try {
    logger.info(`–û—Ç–≤–µ—á–∞–µ–º –Ω–∞ PreCheckoutQuery ${preCheckoutQueryId}, ok=${ok}`);

    if (ok) {
      // –î–ª—è —É—Å–ø–µ—à–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ–¥–∞–µ–º true
      await bot.answerPreCheckoutQuery(preCheckoutQueryId, true);
      logger.info(`PreCheckoutQuery ${preCheckoutQueryId} —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω`);
    } else {
      // –î–ª—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä—è–º–æ–π API –∑–∞–ø—Ä–æ—Å —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
      const apiUrl = `https://api.telegram.org/bot${config.telegramBotToken}/answerPreCheckoutQuery`;
      const data = {
        pre_checkout_query_id: preCheckoutQueryId,
        ok: false,
        error_message: errorMessage || '–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –ø–ª–∞—Ç–µ–∂'
      };

      await axios.post(apiUrl, data);
      logger.warn(`PreCheckoutQuery ${preCheckoutQueryId} –æ—Ç–∫–ª–æ–Ω–µ–Ω: ${errorMessage}`);
    }
  } catch (error: any) {
    const errorMessage = error instanceof Error ? error.message : String(error);
    logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–≤–µ—Ç–µ –Ω–∞ PreCheckoutQuery ${preCheckoutQueryId}: ${errorMessage}`);

    // –ü—ã—Ç–∞–µ–º—Å—è –µ—â–µ —Ä–∞–∑, –µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ
    try {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä—è–º–æ–π API –∑–∞–ø—Ä–æ—Å –¥–ª—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è
      const apiUrl = `https://api.telegram.org/bot${config.telegramBotToken}/answerPreCheckoutQuery`;
      const data = {
        pre_checkout_query_id: preCheckoutQueryId,
        ok: false,
        error_message: '–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞'
      };

      await axios.post(apiUrl, data);
    } catch (retryError) {
      logger.error(`–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–≤—Ç–æ—Ä–Ω–æ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ PreCheckoutQuery: ${retryError}`);
    }
  }
}

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞ –ÆKassa —á–µ—Ä–µ–∑ Telegram
 * –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞ SuccessfulPayment –æ—Ç Telegram
 */
export async function handleSuccessfulYookassaTelegramPayment(
    successfulPayment: TelegramBot.SuccessfulPayment
): Promise<void> {
  try {
    logger.info(`–û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞ –ÆKassa —á–µ—Ä–µ–∑ Telegram: ${JSON.stringify(successfulPayment)}`);

    // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä ID –ø–ª–∞—Ç–µ–∂–∞ –æ—Ç –ÆKassa (–≤–∞–∂–Ω–æ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è)
    const providerPaymentChargeId = successfulPayment.provider_payment_charge_id;

    // –†–∞–∑–±–∏—Ä–∞–µ–º payload, –∫–æ—Ç–æ—Ä—ã–π –º—ã —Å–æ–∑–¥–∞–≤–∞–ª–∏ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –∏–Ω–≤–æ–π—Å–∞
    let metadata: any = {};
    try {
      metadata = JSON.parse(successfulPayment.invoice_payload);
    } catch (parseError) {
      logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–æ—Ä–µ payload –ø–ª–∞—Ç–µ–∂–∞: ${parseError}`);
      throw new Error('–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —Ä–∞–∑–æ–±—Ä–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∞');
    }

    // –ü–æ–ª—É—á–∞–µ–º –Ω—É–∂–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
    const userId = parseInt(metadata.userId || '0', 10);
    const period = metadata.subscriptionPeriod as SubscriptionPeriod;
    const subscriptionId = metadata.subscriptionId ? parseInt(metadata.subscriptionId, 10) : undefined;
    const isGift = metadata.isGift === 'true';
    const giftSubscriptionId = metadata.giftSubscriptionId ? parseInt(metadata.giftSubscriptionId, 10) : undefined;
    const recipientId = metadata.recipientId ? parseInt(metadata.recipientId, 10) : undefined;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    const user = await prisma.user.findUnique({
      where: { id: userId }
    });

    if (!user) {
      logger.error(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–ª–∞—Ç–µ–∂–∞ –ÆKassa: ${userId}`);
      throw new Error(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω: ${userId}`);
    }

    // –ù–∞—Ö–æ–¥–∏–º –ø–ª–∞—Ç–µ–∂ –≤ –Ω–∞—à–µ–π –ë–î –ø–æ ID –≤ —Å–≤—è–∑–∞–Ω–Ω–æ–π —Ç–∞–±–ª–∏—Ü–µ –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π
    const tgPaymentId = `tg_${Date.now()}_${userId}`; // –ó–∞–ø–∞—Å–Ω–æ–π ID, –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π

    // –ò—â–µ–º –ø–ª–∞—Ç–µ–∂ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏ —Å—Ç–∞—Ç—É—Å—É
    const payment = await prisma.payment.findFirst({
      where: {
        userId: userId,
        status: 'PENDING',
        paymentMethod: 'YOOKASSA_TELEGRAM'
      },
      orderBy: {
        createdAt: 'desc'
      }
    });

    if (payment) {
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø–ª–∞—Ç–µ–∂
      await prisma.payment.update({
        where: { id: payment.id },
        data: {
          status: PaymentStatus.SUCCEEDED,
          confirmedAt: new Date(),
          paymentMethod: `YOOKASSA_TELEGRAM:${providerPaymentChargeId}`
        }
      });

      logger.info(`–ü–ª–∞—Ç–µ–∂ ${payment.id} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω –¥–æ —Å—Ç–∞—Ç—É—Å–∞ SUCCEEDED —Å –ø—Ä–æ–≤–∞–π–¥–µ—Ä ID: ${providerPaymentChargeId}`);
    } else {
      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂
      await prisma.payment.create({
        data: {
          id: tgPaymentId,
          userId: userId,
          subscriptionId: subscriptionId || null,
          amount: successfulPayment.total_amount / 100, // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–ø–µ–π–∫–∏ –≤ —Ä—É–±–ª–∏
          currency: successfulPayment.currency,
          status: PaymentStatus.SUCCEEDED,
          description: `–û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ Telegram –ÆKassa (${period})`,
          paymentMethod: `YOOKASSA_TELEGRAM:${providerPaymentChargeId}`,
          confirmedAt: new Date()
        }
      });

      logger.info(`–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂ ${tgPaymentId} –Ω–∞ –æ—Å–Ω–æ–≤–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞ Telegram –ÆKassa`);
    }

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–ª–∞—Ç–µ–∂ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
    try {
      if (isGift && giftSubscriptionId && recipientId) {
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ–¥–∞—Ä–æ—á–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É
        await handleGiftPayment(userId, giftSubscriptionId, recipientId, period);
      } else if (subscriptionId) {
        // –ü—Ä–æ–¥–ª–µ–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –ø–æ–¥–ø–∏—Å–∫—É
        await handleSubscriptionRenewal(userId, subscriptionId, period);
      } else {
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –ø–æ–¥–ø–∏—Å–∫—É
        await handleNewSubscription(userId, period);
      }

      logger.info(`–£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –ø–ª–∞—Ç–µ–∂ –ÆKassa –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
    } catch (processingError: any) {
      const errorMessage = processingError instanceof Error ? processingError.message : String(processingError);
      logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ—Å–ª–µ –ø–ª–∞—Ç–µ–∂–∞ –ÆKassa: ${errorMessage}`);
      throw processingError;
    }
  } catch (error: any) {
    const errorMessage = error instanceof Error ? error.message : String(error);
    logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–ª–∞—Ç–µ–∂–∞ –ÆKassa: ${errorMessage}`);
    throw error;
  }
}

/**
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–¥–∞—Ä–æ—á–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É
 */
export async function handleGiftPayment(
    senderId: number,
    giftSubscriptionId: number,
    recipientId: number,
    period: SubscriptionPeriod
): Promise<void> {
  try {
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥–∞—Ä–æ—á–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏
    await prisma.giftSubscription.update({
      where: { id: giftSubscriptionId },
      data: {
        status: 'PAID'
      }
    });

    // –ù–∞—Ö–æ–¥–∏–º –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è –∏ –ø–æ–ª—É—á–∞—Ç–µ–ª—è
    const sender = await prisma.user.findUnique({
      where: { id: senderId }
    });

    const recipient = await prisma.user.findUnique({
      where: { id: recipientId }
    });

    if (!sender || !recipient) {
      logger.error(`–ù–µ –Ω–∞–π–¥–µ–Ω –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –∏–ª–∏ –ø–æ–ª—É—á–∞—Ç–µ–ª—å –¥–ª—è –ø–æ–¥–∞—Ä–æ—á–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏: ${giftSubscriptionId}`);
      throw new Error('–ù–µ –Ω–∞–π–¥–µ–Ω –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –∏–ª–∏ –ø–æ–ª—É—á–∞—Ç–µ–ª—å –¥–ª—è –ø–æ–¥–∞—Ä–æ—á–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏');
    }

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    try {
      const bot = require('../bot').default;

      if (bot) {
        const periodName = getPeriodName(period);

        const recipientName = recipient.username
            ? '@' + recipient.username
            : recipient.firstName || recipient.telegramId.toString();

        // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—é
        await bot.sendMessage(
            sender.telegramId.toString(),
            `‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–¥–∞—Ä–æ—á–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n–ü–æ–ª—É—á–∞—Ç–µ–ª—å: ${recipientName}\n–¢–∞—Ä–∏—Ñ: ${periodName}\n\n–ü–æ–ª—É—á–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∏—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≤–∞—à–µ–º –ø–æ–¥–∞—Ä–∫–µ.`
        );

        // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—é
        const senderName = sender.username
            ? '@' + sender.username
            : sender.firstName || sender.telegramId.toString();

        const keyboard = {
          reply_markup: {
            inline_keyboard: [
              [{ text: '‚úÖ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥–∞—Ä–æ–∫', callback_data: `redeem_gift_${giftSubscriptionId}` }]
            ]
          }
        };

        await bot.sendMessage(
            recipient.telegramId.toString(),
            `üéÅ *–í–∞–º –ø–æ–¥–∞—Ä–∏–ª–∏ VPN-–ø–æ–¥–ø–∏—Å–∫—É!*\n\n–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: ${senderName}\n–¢–∞—Ä–∏—Ñ: ${periodName}\n\n–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥–∞—Ä–æ–∫.`,
            {
              parse_mode: 'Markdown',
              ...keyboard
            }
        );
      }
    } catch (error: any) {
      const errorMessage = error instanceof Error ? error.message : String(error);
      logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –ø–æ–¥–∞—Ä–∫–µ: ${errorMessage}`);
      // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, –Ω–µ—Å–º–æ—Ç—Ä—è –Ω–∞ –æ—à–∏–±–∫—É –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    }

    logger.info(`–£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –ø–æ–¥–∞—Ä–æ—á–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ #${giftSubscriptionId}`);
  } catch (error: any) {
    const errorMessage = error instanceof Error ? error.message : String(error);
    logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–æ–¥–∞—Ä–æ—á–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏: ${errorMessage}`);
    throw error;
  }
}

/**
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–æ–¥–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏
 */
export async function handleSubscriptionRenewal(
    userId: number,
    subscriptionId: number,
    period: SubscriptionPeriod
): Promise<void> {
  try {
    // –ù–∞—Ö–æ–¥–∏–º –ø–æ–¥–ø–∏—Å–∫—É
    const subscription = await prisma.subscription.findFirst({
      where: {
        id: subscriptionId,
        userId
      }
    });

    if (!subscription) {
      logger.error(`–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: ${subscriptionId}`);
      throw new Error(`–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: ${subscriptionId}`);
    }

    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–æ–≤—É—é –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è
    const durationInDays = getSubscriptionDuration(period);
    const newEndDate = new Date(subscription.endDate);
    newEndDate.setDate(newEndDate.getDate() + durationInDays);

    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
    await prisma.subscription.update({
      where: { id: subscriptionId },
      data: {
        status: 'ACTIVE',
        endDate: newEndDate,
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π, —Ç–∞–∫ –∫–∞–∫ –ø–æ–¥–ø–∏—Å–∫–∞ –ø—Ä–æ–¥–ª–µ–Ω–∞
        reminderStatus: 'NONE',
        lastReminderSent: null,
        autoRenewalFailed: false
      }
    });

    logger.info(`–ü–æ–¥–ø–∏—Å–∫–∞ ${subscriptionId} –ø—Ä–æ–¥–ª–µ–Ω–∞ –¥–æ ${newEndDate.toISOString()}`);

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    try {
      const bot = require('../bot').default;
      const user = await prisma.user.findUnique({ where: { id: userId } });

      if (bot && user) {
        await bot.sendMessage(
            user.telegramId.toString(),
            `‚úÖ –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–¥–ª–µ–Ω–∞ –¥–æ ${newEndDate.toLocaleDateString()}.\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /subscription –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π.`
        );
      }
    } catch (notifyError: any) {
      const errorMessage = notifyError instanceof Error ? notifyError.message : String(notifyError);
      logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø—Ä–æ–¥–ª–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏: ${errorMessage}`);
      // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, –Ω–µ—Å–º–æ—Ç—Ä—è –Ω–∞ –æ—à–∏–±–∫—É –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    }
  } catch (error: any) {
    const errorMessage = error instanceof Error ? error.message : String(error);
    logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–¥–ª–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏: ${errorMessage}`);
    throw error;
  }
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞ —á–µ—Ä–µ–∑ API –ÆKassa
 * @param paymentId –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–ª–∞—Ç–µ–∂–∞ –≤ —Å–∏—Å—Ç–µ–º–µ –ÆKassa
 * @returns –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞ –∏–∑ PaymentStatus
 */
export async function checkYookassaPaymentStatus(paymentId: string): Promise<PaymentStatus> {
  try {
    logger.info(`–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞ –ÆKassa: ${paymentId}`);

    // –°–æ–∑–¥–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –∫ API –ÆKassa
    const shopId = config.yookassaShopId;
    const secretKey = config.yookassaSecretKey;

    // –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ Basic Auth
    const authString = `${shopId}:${secretKey}`;
    const auth = Buffer.from(authString).toString('base64');

    // –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ API –ÆKassa
    const response = await axios.get(`https://api.yookassa.ru/v3/payments/${paymentId}`, {
      headers: {
        'Authorization': `Basic ${auth}`,
        'Content-Type': 'application/json'
      },
      timeout: 10000 // 10 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º–∞—É—Ç
    });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞
    if (response.status !== 200) {
      logger.error(`–û—à–∏–±–∫–∞ API –ÆKassa: –ù–µ–≤–µ—Ä–Ω—ã–π —Å—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: ${response.status}`);
      throw new Error(`–û—à–∏–±–∫–∞ API –ÆKassa: –ù–µ–≤–µ—Ä–Ω—ã–π —Å—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: ${response.status}`);
    }

    // –ü–∞—Ä—Å–∏–º –æ—Ç–≤–µ—Ç
    const paymentData = response.data;
    logger.debug(`–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ –ø–ª–∞—Ç–µ–∂–µ: ${JSON.stringify(paymentData)}`);

    // –ú–∞–ø–ø–∏–Ω–≥ —Å—Ç–∞—Ç—É—Å–æ–≤ –ÆKassa –Ω–∞ –Ω–∞—à–∏ —Å—Ç–∞—Ç—É—Å—ã
    let status: PaymentStatus;
    switch (paymentData.status) {
      case 'pending':
        status = PaymentStatus.PENDING;
        break;
      case 'waiting_for_capture':
        status = PaymentStatus.WAITING_FOR_CAPTURE;
        break;
      case 'succeeded':
        status = PaymentStatus.SUCCEEDED;
        break;
      case 'canceled':
        status = PaymentStatus.CANCELED;
        break;
      default:
        status = PaymentStatus.FAILED;
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –æ –ø–ª–∞—Ç–µ–∂–µ –≤ –Ω–∞—à–µ–π –ë–î
    const existingPayment = await prisma.payment.findUnique({
      where: { id: paymentId }
    });

    if (existingPayment && existingPayment.status !== status) {
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞ –≤ –ë–î, –µ—Å–ª–∏ –æ–Ω –∏–∑–º–µ–Ω–∏–ª—Å—è
      await prisma.payment.update({
        where: { id: paymentId },
        data: {
          status,
          confirmedAt: status === PaymentStatus.SUCCEEDED ? new Date() : existingPayment.confirmedAt
        }
      });

      logger.info(`–°—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞ ${paymentId} –æ–±–Ω–æ–≤–ª–µ–Ω: ${existingPayment.status} -> ${status}`);

      // –ï—Å–ª–∏ –ø–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –µ–≥–æ
      if (status === PaymentStatus.SUCCEEDED && existingPayment.status !== PaymentStatus.SUCCEEDED) {
        const payment = await prisma.payment.findUnique({
          where: { id: paymentId },
          include: { user: true }
        });

        if (payment) {
          try {
            // –ò–∑–≤–ª–µ–∫–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞
            const metadata = paymentData.metadata || {};
            const period = metadata.subscriptionPeriod as SubscriptionPeriod || SubscriptionPeriod.MONTHLY;

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –ø–ª–∞—Ç–µ–∂–∞ –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º –æ–±—Ä–∞–∑–æ–º
            if (metadata.isGift === 'true' && metadata.giftSubscriptionId && metadata.recipientId) {
              // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ–¥–∞—Ä–æ—á–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É
              await handleGiftPayment(
                  payment.userId,
                  parseInt(metadata.giftSubscriptionId, 10),
                  parseInt(metadata.recipientId, 10),
                  period
              );
            } else if (payment.subscriptionId) {
              // –ü—Ä–æ–¥–ª–µ–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –ø–æ–¥–ø–∏—Å–∫—É
              await handleSubscriptionRenewal(
                  payment.userId,
                  payment.subscriptionId,
                  period
              );
            } else {
              // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –ø–æ–¥–ø–∏—Å–∫—É
              await handleNewSubscription(payment.userId, period);
            }

            logger.info(`–ü–ª–∞—Ç–µ–∂ ${paymentId} —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞`);
          } catch (processingError: any) {
            const errorMessage = processingError instanceof Error ? processingError.message : String(processingError);
            logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–ª–∞—Ç–µ–∂–∞ ${paymentId}: ${errorMessage}`);
            throw processingError;
          }
        }
      }
    }

    return status;
  } catch (error: any) {
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ API –ÆKassa
    if (error.response) {
      // –°–µ—Ä–≤–µ—Ä –æ—Ç–≤–µ—Ç–∏–ª —Å –∫–æ–¥–æ–º —Å—Ç–∞—Ç—É—Å–∞ –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ 2xx
      const statusCode = error.response.status;
      const responseData = error.response.data;

      logger.error(`–û—à–∏–±–∫–∞ API –ÆKassa (${statusCode}): ${JSON.stringify(responseData)}`);

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –æ—à–∏–±–æ–∫
      if (statusCode === 404) {
        // –ü–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω
        logger.warn(`–ü–ª–∞—Ç–µ–∂ ${paymentId} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ –ÆKassa`);

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –Ω–∞—à–µ–π –ë–î
        const existingPayment = await prisma.payment.findUnique({
          where: { id: paymentId }
        });

        if (existingPayment && existingPayment.status === PaymentStatus.PENDING) {
          await prisma.payment.update({
            where: { id: paymentId },
            data: {
              status: PaymentStatus.FAILED,
              confirmedAt: new Date()
            }
          });

          logger.info(`–°—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞ ${paymentId} –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ FAILED (–Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ÆKassa)`);
        }

        return PaymentStatus.FAILED;
      } else if (statusCode === 401 || statusCode === 403) {
        // –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        logger.error(`–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–ª–∞—Ç–µ–∂–∞ ${paymentId}: –ü—Ä–æ–≤–µ—Ä—å—Ç–µ shopId –∏ secretKey`);
        throw new Error('–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏ –¥–æ—Å—Ç—É–ø–µ –∫ API –ÆKassa');
      }
    } else if (error.request) {
      // –ó–∞–ø—Ä–æ—Å –±—ã–ª —Å–¥–µ–ª–∞–Ω, –Ω–æ –Ω–µ –ø–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç
      logger.error(`–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç API –ÆKassa –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–ª–∞—Ç–µ–∂–∞ ${paymentId}: ${error.message}`);
      throw new Error('–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ –ÆKassa');
    }

    // –û–±—â–∞—è –æ—à–∏–±–∫–∞
    const errorMessage = error instanceof Error ? error.message : String(error);
    logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞ ${paymentId}: ${errorMessage}`);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–ª–∞—Ç–µ–∂ –≤ –Ω–∞—à–µ–π –ë–î
    const existingPayment = await prisma.payment.findUnique({
      where: { id: paymentId }
    });

    // –ï—Å–ª–∏ –ø–ª–∞—Ç–µ–∂ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ–≥–æ —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å
    if (existingPayment) {
      return existingPayment.status;
    }

    throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞: ${errorMessage}`);
  }
}

