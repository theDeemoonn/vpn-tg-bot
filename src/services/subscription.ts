import { PrismaClient, Subscription, SubscriptionStatus, ReminderStatus, Payment, PaymentStatus } from '@prisma/client';
import { logger } from '../utils/logger';
import * as paymentService from './payment';
import * as userService from './user';
import bot from '../bot';
import { prisma } from './database';

/**
 * –°–µ—Ä–≤–∏—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∞–º–∏ –∏ –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ–º
 */

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –∑–∞–∫–∞–Ω—á–∏–≤–∞—é—Ç—Å—è –≤ –±–ª–∏–∂–∞–π—à–∏–µ –¥–Ω–∏ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
 */
export async function sendSubscriptionReminders() {
  const now = new Date();
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –∑–∞–∫–∞–Ω—á–∏–≤–∞—é—Ç—Å—è —á–µ—Ä–µ–∑ 7, 3 –∏ 1 –¥–µ–Ω—å
  const oneDay = 24 * 60 * 60 * 1000;
  const threeDays = 3 * oneDay;
  const sevenDays = 7 * oneDay;
  
  try {
    // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏
    const activeSubscriptions = await prisma.subscription.findMany({
      where: {
        status: SubscriptionStatus.ACTIVE,
        endDate: {
          gt: now,
        },
      },
      include: {
        user: true,
      },
    });
    
    for (const subscription of activeSubscriptions) {
      const timeLeft = subscription.endDate.getTime() - now.getTime();
      
      // –ü–æ–¥–ø–∏—Å–∫–∞ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ 7 –¥–Ω–µ–π (–ø–µ—Ä–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ)
      if (
        timeLeft <= sevenDays && 
        timeLeft > threeDays && 
        subscription.reminderStatus !== ReminderStatus.FIRST_SENT &&
        subscription.reminderStatus !== ReminderStatus.SECOND_SENT &&
        subscription.reminderStatus !== ReminderStatus.FINAL_SENT
      ) {
        await sendReminderMessage(subscription, 7);
        await prisma.subscription.update({
          where: { id: subscription.id },
          data: { 
            reminderStatus: ReminderStatus.FIRST_SENT,
            lastReminderSent: now,
          },
        });
      }
      
      // –ü–æ–¥–ø–∏—Å–∫–∞ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ 3 –¥–Ω—è (–≤—Ç–æ—Ä–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ)
      else if (
        timeLeft <= threeDays && 
        timeLeft > oneDay && 
        subscription.reminderStatus !== ReminderStatus.SECOND_SENT &&
        subscription.reminderStatus !== ReminderStatus.FINAL_SENT
      ) {
        await sendReminderMessage(subscription, 3);
        await prisma.subscription.update({
          where: { id: subscription.id },
          data: { 
            reminderStatus: ReminderStatus.SECOND_SENT,
            lastReminderSent: now,
          },
        });
      }
      
      // –ü–æ–¥–ø–∏—Å–∫–∞ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ 1 –¥–µ–Ω—å (—Ñ–∏–Ω–∞–ª—å–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ)
      else if (
        timeLeft <= oneDay && 
        subscription.reminderStatus !== ReminderStatus.FINAL_SENT
      ) {
        await sendReminderMessage(subscription, 1);
        await prisma.subscription.update({
          where: { id: subscription.id },
          data: { 
            reminderStatus: ReminderStatus.FINAL_SENT,
            lastReminderSent: now,
          },
        });
      }
    }
    
    logger.info(`–û—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –ø—Ä–æ–¥–ª–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–æ–∫`);
  } catch (error) {
    const errorMessage = error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';
    logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ –ø—Ä–æ–¥–ª–µ–Ω–∏–∏: ${errorMessage}`);
  }
}

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º –æ –ø—Ä–æ–¥–ª–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏
 */
async function sendReminderMessage(subscription: Subscription & { user: any }, daysLeft: number) {
  const { user } = subscription;
  
  const message = `üîÑ *–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –ø–æ–¥–ø–∏—Å–∫–µ*\n\n`
    + `–í–∞—à–∞ VPN-–ø–æ–¥–ø–∏—Å–∫–∞ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ *${daysLeft} ${getDaysText(daysLeft)}*.\n\n`
    + (subscription.autoRenewal 
        ? `‚úÖ –£ –≤–∞—Å –≤–∫–ª—é—á–µ–Ω–æ –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ. –û–ø–ª–∞—Ç–∞ –±—É–¥–µ—Ç —Å–ø–∏—Å–∞–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.\n\n–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ, –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª "–ú–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏".` 
        : `‚ùóÔ∏è –ê–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ –Ω–µ –≤–∫–ª—é—á–µ–Ω–æ. –ß—Ç–æ–±—ã –ø—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É, –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª "–ú–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏" –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ü—Ä–æ–¥–ª–∏—Ç—å".\n\n–¢–∞–∫–∂–µ –≤—ã –º–æ–∂–µ—Ç–µ –≤–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ, —á—Ç–æ–±—ã –Ω–µ –±–µ—Å–ø–æ–∫–æ–∏—Ç—å—Å—è –æ –ø—Ä–æ–¥–ª–µ–Ω–∏–∏ –≤ –±—É–¥—É—â–µ–º.`);
  
  try {
    await bot.sendMessage(user.telegramId.toString(), message, {
      parse_mode: 'Markdown',
      reply_markup: {
        inline_keyboard: [
          [
            { text: '–ú–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏', callback_data: 'my_subscriptions' }
          ],
          [
            subscription.autoRenewal
              ? { text: '–û—Ç–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ', callback_data: `disable_auto_renewal_${subscription.id}` }
              : { text: '–í–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ', callback_data: `enable_auto_renewal_${subscription.id}` }
          ]
        ]
      }
    });
    logger.info(`–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${user.telegramId} –æ –ø–æ–¥–ø–∏—Å–∫–µ ${subscription.id}`);
  } catch (error) {
    const errorMessage = error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';
    logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${user.telegramId}: ${errorMessage}`);
  }
}

/**
 * –°–∫–ª–æ–Ω–µ–Ω–∏–µ –¥–Ω–µ–π –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —á–∏—Å–ª–∞
 */
function getDaysText(days: number): string {
  if (days === 1) return '–¥–µ–Ω—å';
  if (days >= 2 && days <= 4) return '–¥–Ω—è';
  return '–¥–Ω–µ–π';
}

/**
 * –ü—Ä–æ—Ü–µ—Å—Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–æ–¥–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–æ–∫
 */
export async function processAutoRenewals() {
  const now = new Date();
  
  try {
    // –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –∑–∞–∫–∞–Ω—á–∏–≤–∞—é—Ç—Å—è –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤
    const subscriptionsToRenew = await prisma.subscription.findMany({
      where: {
        status: SubscriptionStatus.ACTIVE,
        autoRenewal: true,
        autoRenewalFailed: false,
        endDate: {
          lt: new Date(now.getTime() + 24 * 60 * 60 * 1000),
          gt: now,
        },
      },
      include: {
        user: true,
      },
    });
    
    logger.info(`–ù–∞–π–¥–µ–Ω–æ ${subscriptionsToRenew.length} –ø–æ–¥–ø–∏—Å–æ–∫ –¥–ª—è –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏—è`);
    
    for (const subscription of subscriptionsToRenew) {
      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂ –¥–ª—è –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏—è
      try {
        // –ù–∞—Ö–æ–¥–∏–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —É—Å–ø–µ—à–Ω—ã–π –ø–ª–∞—Ç–µ–∂ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å—É–º–º—ã
        const lastPayment = await prisma.payment.findFirst({
          where: {
            subscriptionId: subscription.id,
            status: PaymentStatus.SUCCEEDED,
          },
          orderBy: {
            createdAt: 'desc',
          },
        });
        
        if (!lastPayment) {
          logger.error(`–ù–µ –Ω–∞–π–¥–µ–Ω –ø—Ä–µ–¥—ã–¥—É—â–∏–π –ø–ª–∞—Ç–µ–∂ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ ${subscription.id}`);
          continue;
        }
        
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂ —Å —Ç–æ–π –∂–µ —Å—É–º–º–æ–π
        const paymentResult = await paymentService.createAutoRenewalPayment(
          subscription.userId,
          subscription.id,
          lastPayment.amount,
          `–ê–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ VPN-–ø–æ–¥–ø–∏—Å–∫–∏`
        );
        
        if (paymentResult.success) {
          // –û–±–Ω–æ–≤–ª—è–µ–º ID –ø–ª–∞—Ç–µ–∂–∞ –¥–ª—è –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏—è
          await prisma.subscription.update({
            where: { id: subscription.id },
            data: { renewalPaymentId: paymentResult.paymentId },
          });
          
          logger.info(`–°–æ–∑–¥–∞–Ω –ø–ª–∞—Ç–µ–∂ –¥–ª—è –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ ${subscription.id}: ${paymentResult.paymentId}`);
          
          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–∏
          await bot.sendMessage(
            subscription.user.telegramId.toString(),
            `‚úÖ *–ê–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏*\n\n`
            + `–ú—ã —Å–æ–∑–¥–∞–ª–∏ –ø–ª–∞—Ç–µ–∂ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–æ–¥–ª–µ–Ω–∏—è –≤–∞—à–µ–π VPN-–ø–æ–¥–ø–∏—Å–∫–∏.\n`
            + `–°—É–º–º–∞: ${lastPayment.amount} ${lastPayment.currency}\n\n`
            + `–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –ø–æ–ª—å–∑—É–µ—Ç–µ—Å—å –Ω–∞—à–∏–º —Å–µ—Ä–≤–∏—Å–æ–º!`,
            { parse_mode: 'Markdown' }
          );
        } else {
          // –ü–æ–º–µ—á–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É –∫–∞–∫ —Å –Ω–µ—É–¥–∞—á–Ω—ã–º –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ–º
          await prisma.subscription.update({
            where: { id: subscription.id },
            data: { autoRenewalFailed: true },
          });
          
          logger.error(`–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞ –¥–ª—è –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ ${subscription.id}: ${paymentResult.error}`);
          
          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–µ—É–¥–∞—á–Ω–æ–º –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–∏
          await bot.sendMessage(
            subscription.user.telegramId.toString(),
            `‚ùå *–û—à–∏–±–∫–∞ –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏—è*\n\n`
            + `–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –º—ã –Ω–µ —Å–º–æ–≥–ª–∏ —Å–æ–∑–¥–∞—Ç—å –ø–ª–∞—Ç–µ–∂ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–æ–¥–ª–µ–Ω–∏—è –≤–∞—à–µ–π VPN-–ø–æ–¥–ø–∏—Å–∫–∏.\n\n`
            + `–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–¥–ª–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –≤—Ä—É—á–Ω—É—é –≤ —Ä–∞–∑–¥–µ–ª–µ "–ú–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏".`,
            {
              parse_mode: 'Markdown',
              reply_markup: {
                inline_keyboard: [
                  [{ text: '–ú–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏', callback_data: 'my_subscriptions' }]
                ]
              }
            }
          );
        }
      } catch (error) {
        const errorMessage = error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';
        logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏ ${subscription.id}: ${errorMessage}`);
      }
    }
  } catch (error) {
    const errorMessage = error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';
    logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–π: ${errorMessage}`);
  }
}

/**
 * –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–æ–∫ (–∞–∫—Ç–∏–≤–Ω—ã–µ/–∏—Å—Ç–µ–∫—à–∏–µ)
 */
export async function updateSubscriptionStatuses() {
  const now = new Date();
  
  try {
    // –ü–æ–º–µ—á–∞–µ–º –∏—Å—Ç–µ–∫—à–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏
    const expiredSubscriptions = await prisma.subscription.updateMany({
      where: {
        status: SubscriptionStatus.ACTIVE,
        endDate: {
          lt: now,
        },
      },
      data: {
        status: SubscriptionStatus.EXPIRED,
      },
    });
    
    logger.info(`–û–±–Ω–æ–≤–ª–µ–Ω–æ ${expiredSubscriptions.count} –∏—Å—Ç–µ–∫—à–∏—Ö –ø–æ–¥–ø–∏—Å–æ–∫`);
    
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ–± –∏—Å—Ç–µ–∫—à–∏—Ö –ø–æ–¥–ø–∏—Å–∫–∞—Ö –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    const newlyExpiredSubscriptions = await prisma.subscription.findMany({
      where: {
        status: SubscriptionStatus.EXPIRED,
        updatedAt: {
          gte: new Date(now.getTime() - 60 * 60 * 1000), // –ò—Å—Ç–µ–∫—à–∏–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å
        },
      },
      include: {
        user: true,
      },
    });
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∏—Å—Ç–µ—á–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏
    for (const subscription of newlyExpiredSubscriptions) {
      try {
        await bot.sendMessage(
          subscription.user.telegramId.toString(),
          `‚ö†Ô∏è *–í–∞—à–∞ VPN-–ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞*\n\n`
          + `–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è VPN, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–¥–ª–∏—Ç–µ –≤–∞—à—É –ø–æ–¥–ø–∏—Å–∫—É.`,
          {
            parse_mode: 'Markdown',
            reply_markup: {
              inline_keyboard: [
                [{ text: '–ü—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É', callback_data: `renew_subscription_${subscription.id}` }]
              ]
            }
          }
        );
      } catch (error: any) {
        logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∏—Å—Ç–µ—á–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏ ${subscription.id}: ${error.message}`);
      }
    }
  } catch (error) {
    const errorMessage = error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';
    logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–æ–≤ –ø–æ–¥–ø–∏—Å–æ–∫: ${errorMessage}`);
  }
}

/**
 * –í–∫–ª—é—á–∞–µ—Ç –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏
 */
export async function enableAutoRenewal(subscriptionId: number) {
  try {
    await prisma.subscription.update({
      where: { id: subscriptionId },
      data: {
        autoRenewal: true,
        autoRenewalFailed: false, // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –Ω–µ—É–¥–∞—á–Ω–æ–≥–æ –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏—è
      },
    });
    return { success: true };
  } catch (error: any) {
    const errorMessage = error instanceof Error ? error.message : String(error);
    logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–∫–ª—é—á–µ–Ω–∏–∏ –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏—è –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ ${subscriptionId}: ${errorMessage}`);
    return { success: false, error: errorMessage };
  }
}

/**
 * –û—Ç–∫–ª—é—á–∞–µ—Ç –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏
 */
export async function disableAutoRenewal(subscriptionId: number) {
  try {
    await prisma.subscription.update({
      where: { id: subscriptionId },
      data: {
        autoRenewal: false,
      },
    });
    return { success: true };
  } catch (error: any) {
    const errorMessage = error instanceof Error ? error.message : String(error);
    logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏—è –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ ${subscriptionId}: ${errorMessage}`);
    return { success: false, error: errorMessage };
  }
} 